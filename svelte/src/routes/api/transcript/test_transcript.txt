00:00:08
thank you
00:00:13
Hello friends welcome to coding Garden
00:00:15
uh it's been way too long it's good to
00:00:17
see you all I'm happy to see all of your
00:00:19
names in the chat and today we're going
00:00:22
to answer some code questions
00:00:25
um so if you have a question
00:00:27
in the chat you can do exclamation mark
00:00:30
ask followed by your question and then
00:00:33
it will show up on this website and
00:00:35
thank you ask spark thank you for that
00:00:36
sub
00:00:38
um
00:00:40
so I see you're 39 months almost about
00:00:43
to have a midlife crisis I get it that's
00:00:45
great wait and thank you the shibas for
00:00:46
the gift
00:00:48
uh but yeah if you do exclamation mark
00:00:49
ask your question will show up here I
00:00:52
won't lose it I will do my best to
00:00:54
answer it
00:00:55
oh thank you a school's news welcome in
00:00:58
do I have an actual Garden I do I do my
00:01:00
wife maintains it though
00:01:02
well and I guess
00:01:04
um
00:01:05
in the U.S
00:01:07
a garden typically is for like flowers
00:01:11
and fruits and vegetables I know like in
00:01:12
the UK they call their yard a garden
00:01:16
um I have two very big yards like my
00:01:18
front yard in my backyard but yeah but
00:01:20
our garden has peppers tomatoes
00:01:23
strawberries raspberries
00:01:27
uh and lavender right now that's all we
00:01:30
got
00:01:31
okay but uh yeah so um we're gonna we're
00:01:33
gonna get warmed up welcome everybody in
00:01:35
exclamation mark ask it'll show up here
00:01:37
we won't lose it
00:01:39
um let's say hi to everyone really
00:01:40
really quick
00:01:42
and then I'll do a code Wars code Kata
00:01:44
just to get warmed up because
00:01:46
honestly I think it's been weeks since
00:01:48
I've even written code
00:01:50
um so
00:01:51
gotta get back into it but if you would
00:01:53
like to say hi to me or if you'd like me
00:01:55
to say hi to you you can say hi hello
00:01:58
hello hey yo cheers greetings High us up
00:02:01
what's up morning afternoon evening
00:02:02
howdy good day codinghayo vohio
00:02:07
say any one of those things I'll do my
00:02:10
best to acknowledge you we're gonna go
00:02:12
back in time to 15 minutes ago when
00:02:15
zelino was the first to say hello
00:02:17
welcome in Selena what's up Mark and
00:02:19
neveskar and limotes and rugmat hello
00:02:21
lakshman yeah I I uh
00:02:24
I thought pixelation uh would be
00:02:27
interesting it's this because this is my
00:02:31
studio
00:02:32
but you know
00:02:34
I I can see how some of you might have
00:02:36
thought that uh that the stream just had
00:02:38
a bad bit rate what's up messy mate in
00:02:40
stocks good to see you bukhari Dev
00:02:41
what's up hello for someth and hasmola
00:02:43
and nightcoder and it's by therial and
00:02:45
default Galloping tapeworm what's up
00:02:46
Diamond and webnit welcome in everybody
00:02:49
glad to see you
00:02:51
uh yeah let's let's jump right into it
00:02:53
let's just do a uh let's do a code Wars
00:02:55
code Kata
00:02:57
um and winter not found welcome in good
00:02:59
to see you and uh if you don't want to
00:03:02
watch me watch watch me solve a code
00:03:04
cutter go go over to my YouTube and
00:03:05
watch my latest video
00:03:09
um
00:03:10
I had fun making it and editing it and
00:03:13
I'd appreciate it if you gave it a watch
00:03:14
so go check it out let's write some code
00:03:18
um and talk to you welcome in
00:03:21
um right now so here's the thing code
00:03:23
Wars is kind of broken for me they're
00:03:26
going through like a UI change
00:03:28
but watch what happens first of all the
00:03:30
URL says beta false but if I go in and I
00:03:33
choose any one of these filters
00:03:38
the rest of the filters disappear the
00:03:41
rest of it and then I can't like filter
00:03:43
by uh
00:03:46
um yeah there's clear the browser cache
00:03:48
maybe that'll help
00:03:50
let me do that really quick
00:03:52
well I think I mean I guess if I do a
00:03:54
hard reload
00:03:57
so like they pop back up but let's see
00:03:58
like if I choose a thing
00:04:05
okay they seem to stick around now
00:04:09
and I want like katas I have not trained
00:04:11
on
00:04:13
now see they disappear
00:04:15
shut down the computer no regardless I
00:04:18
figured out what the query parameters
00:04:19
needed to be and I just put them in
00:04:21
manually I'm going to solve the 6q 6 Q's
00:04:23
aren't like super difficult but it's
00:04:25
probably it's gonna take me maybe like
00:04:26
10 or so minutes to uh to solve it in
00:04:29
lakshman thank you for the bits it says
00:04:31
uh you should change the minimum number
00:04:33
of bids to eight so that we'll be
00:04:34
sending you bytes instead of bits that's
00:04:36
hilarious
00:04:38
that's really funny
00:04:39
um and this this has some this Kata has
00:04:41
something to do with bytes so very very
00:04:43
relevant
00:04:44
okay a stream of data is received and
00:04:47
needs to be reversed each segment is
00:04:49
eight bits long meaning the order of
00:04:50
these segments needs to be reversed for
00:04:52
example boom boom boom boom should
00:04:54
become boom boom boom boom okay a total
00:04:57
number of bits will always be a multiple
00:04:58
of eight the data is given in an array I
00:05:01
can do this basically we need to spit it
00:05:03
split it into chunks of eight and then
00:05:04
reverse the whole thing
00:05:06
let's let's let's do it like Fast really
00:05:09
really fast so um data is going to be an
00:05:13
array
00:05:15
and we need to split it into chunks of
00:05:17
eight
00:05:19
um
00:05:21
so
00:05:22
we are actually just going to we're
00:05:24
going to do a loop
00:05:26
and we're gonna have chunks which is an
00:05:28
array that we'll push into and then
00:05:30
we'll have a loop that goes from the
00:05:33
beginning to the end so while I is less
00:05:35
than data.length
00:05:38
um and then we'll increment I by eight
00:05:40
on each iteration
00:05:44
yeah yeah that seems right
00:05:47
and then we're gonna push a chunk in
00:05:49
there which is going to be data Dot
00:05:51
slice we want to create a slice of the
00:05:53
array
00:05:55
that goes from
00:05:57
I to I plus eight
00:06:04
because it's non-inclusive so that
00:06:06
should give us a bunch of chunks
00:06:08
and then
00:06:10
um
00:06:12
uh we need to
00:06:15
um
00:06:16
reverse those chunks
00:06:21
and then we need to join it back all
00:06:23
together into a single array so we need
00:06:25
to flatten it
00:06:27
um is there isn't there a built-in
00:06:29
flatten
00:06:31
um
00:06:32
on an arrays is it's smoosh
00:06:38
flat creates a new array with all
00:06:40
sub-array elements concatenated yeah so
00:06:42
we just want flat all right here it is
00:06:45
first try
00:06:49
nice attempt
00:06:53
first try
00:06:56
uh well that was fun
00:06:59
okay great work everybody
00:07:01
you did good
00:07:02
um if you want to go try and solve it
00:07:04
there's there's the uh There's the link
00:07:07
there uh should we do one more should we
00:07:09
start answering questions uh we already
00:07:11
got seven questions let's let's start
00:07:12
answering questions
00:07:14
um
00:07:15
it always gets to a point where I get
00:07:16
too many questions and then
00:07:20
um
00:07:21
uh yeah I can't answer them all so let's
00:07:23
do our best which all this would take
00:07:26
it
00:07:27
it depends it always depends it's like
00:07:29
sometimes the six cues are
00:07:32
hard sometimes they're not
00:07:34
uh
00:07:36
Blackstone says generate YouTube
00:07:37
timestamps based on the auto transcripts
00:07:39
from a YouTube video Yeah I want to do
00:07:41
this eventually I don't think I'll do
00:07:43
this today because it's going to take
00:07:44
some research but I just got access to
00:07:47
gpt4 Via the AP API and that's what I'm
00:07:50
gonna need because
00:07:53
uh my live streams are
00:07:57
uh hours long and so I need a lot of
00:08:01
tokens to be able to summarize the whole
00:08:02
thing but yeah this is a good idea we're
00:08:04
gonna definitely do something like that
00:08:05
eventually
00:08:07
um all right I will answer this question
00:08:10
because I know this one came in first
00:08:13
um
00:08:14
well the the
00:08:16
gpt4 was only it was like on a wait list
00:08:19
you still have to pay for it
00:08:21
was on a waitlist and I recently got
00:08:23
access to it maybe everybody got access
00:08:24
to it I don't know
00:08:27
yeah well the idea would be to
00:08:29
automatically create chapters I think
00:08:31
that's what they're saying here
00:08:33
um and by timestamps we mean like uh
00:08:36
uh yeah the transcript already says what
00:08:39
what was said at what time but we want
00:08:41
to summarize that and say oh for this 10
00:08:43
minute chunk CJ was talking about open
00:08:46
source projects or something like that
00:08:48
right but let's answer this question
00:08:49
from uh wacky eater who says when
00:08:51
looking at open source projects to
00:08:53
contribute to do you first familiarize
00:08:55
yourself with the code base or do you
00:08:57
get an issue assigned then explore the
00:08:59
code base based on the issue
00:09:01
um I think it's a little bit of both but
00:09:03
I lean toward the second thing and this
00:09:06
doesn't just apply to open source
00:09:07
projects this is like let's say you're
00:09:09
working a job and you got assigned to a
00:09:12
new project or you got moved to another
00:09:14
team or you just joined a company and
00:09:16
like you're trying to figure out their
00:09:18
code base
00:09:19
I almost always
00:09:22
just try to figure out the one thing
00:09:24
that I that I'm working on because if
00:09:25
you try to get yourself familiarized
00:09:27
with the entire code base it's going to
00:09:29
take a long time and ultimately the
00:09:32
thing that you end up working on
00:09:33
probably won't be
00:09:36
um
00:09:37
uh
00:09:38
won't require you to know how the entire
00:09:41
thing works
00:09:42
um so yeah typically just just uh I
00:09:45
would say the the former because you
00:09:47
kind of you do you will have to set up
00:09:49
the project right so in order to set up
00:09:50
the project you might need to
00:09:51
familiarize yourself with like depending
00:09:54
on the kind of project I don't know
00:09:55
where where the models are or like what
00:09:58
kind of Dev process there is do you have
00:10:00
to spin up the docker container so
00:10:01
that's going to require you to touch
00:10:03
more than the specific feature that
00:10:05
you're working on just to get it set up
00:10:06
locally
00:10:07
but then after that I start to Target
00:10:10
and just work on the thing specifically
00:10:11
that the specific issue that I'm working
00:10:13
on so that's how I do it anybody in the
00:10:15
chat if you have any experience with
00:10:16
that or comments on it feel free to
00:10:18
throw it in the chat
00:10:20
um and then also uh
00:10:22
should we try to
00:10:25
contribute to an open source project I
00:10:26
don't even know what we would do
00:10:29
um I've contributed to Veet recently
00:10:32
the thing is like any any open source
00:10:33
project we choose it's gonna take like a
00:10:35
lot of research just to figure out how
00:10:38
to solve the issue that we pick
00:10:41
um
00:10:43
I don't know
00:10:46
what if we look at the view let's look
00:10:48
at the view repo
00:10:50
let's see
00:10:52
um
00:10:54
fix the typo that's normally what I do
00:10:58
um
00:11:00
oh actually yeah that's a great Point
00:11:01
limos yeah no beautiful beautiful point
00:11:04
because I actually did contribute to V
00:11:06
recently uh honestly let's see if I
00:11:08
don't even know if it made it into the
00:11:09
the release yet but let me show you what
00:11:11
I did for that
00:11:15
um
00:11:17
I'd be curious if they have had a
00:11:19
release since then yeah yeah yeah yeah
00:11:22
yeah yeah honestly let's let's do this
00:11:24
if we generate if we generate a react
00:11:26
Plus typescript app with v you're going
00:11:27
to see my change in there
00:11:29
which is actually really fun because uh
00:11:32
that means thousands of people are going
00:11:34
to get my one little line of code that I
00:11:36
wrote
00:11:38
um check it out
00:11:40
uh react TS example
00:11:44
so if you choose react uh I actually if
00:11:46
you choose react with typescript or uh
00:11:49
react with JavaScript
00:11:50
um you will see these changes
00:11:53
um
00:11:56
so if you go to the eslint config
00:11:59
this one little line of code is what I
00:12:01
added because without this line of code
00:12:04
um
00:12:05
uh the eslint config actually breaks
00:12:12
doesn't seem to be breaking though
00:12:15
which is kind of funny
00:12:16
um oh because I didn't did I not install
00:12:18
I didn't install dependencies that's why
00:12:28
all right hopefully we can we can see
00:12:30
this error now so if you go in here
00:12:33
yeah so this is what happened when
00:12:35
people would generate a Veep project
00:12:37
with reactant typescript this little
00:12:39
parsing error would show up there
00:12:41
um
00:12:42
and uh
00:12:45
well not that I lost it I lost the
00:12:47
change
00:12:50
actually I think I could do it from
00:12:51
memory so it's something like
00:12:53
um
00:12:55
eslint disable or eslint EnV node
00:13:06
how does a comment work is it star slash
00:13:25
well
00:13:27
let me show you how I found it so uh
00:13:29
basically if if I wanted to add that
00:13:32
little piece of code for the the
00:13:33
generated react typescript app
00:13:36
um
00:13:37
this just code doesn't like it let's
00:13:39
reload the window
00:13:41
okay it well no
00:13:48
oh no
00:13:51
is this a new error that needs to be
00:13:53
fixed
00:14:00
yeah
00:14:02
this is a new era that needs to be
00:14:06
no
00:14:09
um
00:14:23
dang
00:14:25
well here's the issue
00:14:27
um this says include well it says
00:14:30
include store is there an exclude in the
00:14:32
TX config yeah
00:14:37
that's what we need
00:14:40
oh uh that's CJs
00:15:09
well here's the thing if we fix this we
00:15:11
can make another PR to V which is I
00:15:13
think why it's worth it's worth fixing
00:15:14
this first of all I just want to confirm
00:15:17
that this is actually an issue so let me
00:15:18
start over here
00:15:21
um let's remove that react TS example
00:15:23
thing
00:15:26
and then
00:15:27
um
00:15:28
do it again
00:15:37
install dependencies first
00:15:41
run the linter
00:15:44
no linter errors
00:15:51
look at the file
00:15:53
there's an error
00:15:56
okay so we're going to fix this we're
00:15:58
gonna fix this issue but let's just talk
00:16:00
about how I found where this code even
00:16:02
was
00:16:03
so when you go to the Veet repo
00:16:06
um there's there's I mean there's a lot
00:16:08
of stuff to look at here one one thing
00:16:10
you should get familiar with especially
00:16:11
if you're contributing to projects in
00:16:13
the JavaScript and node.js world is most
00:16:16
open source projects are using a mono
00:16:19
repo
00:16:20
which means they typically have this
00:16:21
folder called packages
00:16:23
so if you click on packages these are
00:16:25
actually multiple projects that are
00:16:28
actually like published to npm that all
00:16:31
live within this one repo so that's kind
00:16:33
of like the first place to start is
00:16:36
um go into the packages directory to see
00:16:38
if you can find which of the projects
00:16:39
you want to contribute to and like where
00:16:41
that code actually is
00:16:43
um so specifically what I wanted to do
00:16:45
is when someone runs this command npm
00:16:47
create Veet and then they they choose
00:16:50
reactant typescript I wanted to change
00:16:52
the code that got generated
00:16:54
um and so I know that that would be in
00:16:56
create V because create Veet is the sub
00:16:59
command that gets run here when you
00:17:02
create a v project which is different
00:17:04
from V because so if you look at a
00:17:06
generated V project
00:17:08
in the package.json it has a Dev
00:17:11
dependency on Veet so if you wanted to
00:17:13
contribute to the actual Veet library
00:17:15
then you would go into this directory
00:17:17
and then you would look through the
00:17:19
source code in there but we wanted to
00:17:20
contribute to create V because that's
00:17:22
the thing that generates projects so I
00:17:23
knew that I needed to start looking in
00:17:24
here
00:17:25
and then from there there specifically
00:17:28
are a feat no Veet Veet v-i-t-e they're
00:17:32
specifically are react typescript and
00:17:34
react directory so if we look in this
00:17:36
this is the code that's used to actually
00:17:38
generate a Veet project and if we look
00:17:40
at the file this is what I knew I needed
00:17:42
to modify in order to fix it so
00:17:46
um
00:17:49
I I think just because I'm I'm used to
00:17:51
contributing to node projects I was able
00:17:53
to find it very fairly quickly but
00:17:56
um ultimately like especially for this
00:17:58
change that I made or in this this PR
00:18:00
that I made
00:18:02
um
00:18:04
uh
00:18:08
what do I want to say oh yeah like I I
00:18:10
didn't there's no need for me to
00:18:11
understand the entire V dependency or
00:18:14
really even understand how create V
00:18:16
works right because if you could go in
00:18:18
and you could start to read their Source
00:18:22
um of like how this actually generates
00:18:24
projects let's see what it does
00:18:28
um
00:18:31
it does a lot it does a lot and I think
00:18:33
it's using like a library to ask
00:18:35
questions on the command line and stuff
00:18:37
like that like we have all these
00:18:38
Frameworks
00:18:39
and then like there's a bunch of like I
00:18:42
I don't I don't even need to know what
00:18:43
this file does because the contribution
00:18:46
that I was making was simply just to
00:18:48
update one of the templates so that's
00:18:49
honestly just to answer your question
00:18:51
that's my main advice is just try to
00:18:53
Target what exactly you're doing
00:18:55
um but I but I do know yeah so you're
00:18:56
quite your comment was
00:18:59
I feel comfortable programming but it's
00:19:01
been very overwhelming to get started
00:19:03
yeah you kind of just have to dive in
00:19:05
does v try with bite or night
00:19:09
neither it rhymes with feet if it rhymes
00:19:13
with feet so feet or or uh is is French
00:19:17
for fast I'm pretty sure
00:19:19
vitae
00:19:22
um
00:19:23
but yeah honestly it just takes practice
00:19:25
of just like diving in and and doing
00:19:28
like just trying to figure out what you
00:19:30
need to do okay so now we want to
00:19:31
actually fix this this issue
00:19:34
um it'll make another pull request one
00:19:36
thing one thing you also should do is if
00:19:37
you're about to fix an issue that
00:19:39
you didn't find through the issues tab
00:19:41
but you should see if somebody has
00:19:42
opened that issue yet
00:19:44
um
00:19:45
so let let's do that because it's very
00:19:47
likely somebody has so if you look at
00:19:49
this error that's popping up now
00:19:51
parsing error
00:19:53
um es lint
00:19:55
was not configured let's see
00:19:58
um if someone
00:20:00
has already opened an issue yes so they
00:20:03
opened this three days ago actually
00:20:04
somebody's already fixed it so it's good
00:20:07
to know I actually don't need to make
00:20:08
this change
00:20:11
um
00:20:13
so they opened the issue
00:20:21
and then
00:20:24
uh
00:20:26
did somebody fix it here we go fix
00:20:28
create VES lint production for react
00:20:31
templates
00:20:33
move the scope of the link command to
00:20:35
the root so it avoids mismatch
00:20:37
um between IDE
00:20:42
let's see what they changed
00:20:44
somebody already fixed it yeah
00:20:47
um
00:20:50
under project they specify the TS config
00:20:57
um
00:20:59
they say lint this directory so that way
00:21:02
that will actually pick up the errors
00:21:06
um
00:21:07
and then we have ignore patterns
00:21:11
I feel like they made too many changes
00:21:14
but I'm not going to make the change now
00:21:16
because they've already they're already
00:21:17
working on it and I'm sure the V team
00:21:19
will have some back and forth here to
00:21:21
determine how to fix this but this this
00:21:23
is more than what's required just to fix
00:21:25
the issue
00:21:26
uh I think that's the other thing
00:21:28
typically when you're contributing to
00:21:29
open source you want to make sure you're
00:21:30
only doing one specific thing at a time
00:21:32
like this this change of the link
00:21:35
command
00:21:36
I guess this makes sense for this PR
00:21:38
because the linter wasn't giving an
00:21:40
error before
00:21:42
um so that makes sense
00:21:45
adding the projects I don't know about
00:21:47
that
00:21:49
adding root true I think makes sense
00:21:52
everywhere not just in the react
00:21:54
template
00:21:55
and then also yeah this ignore patterns
00:21:57
disc this is what I'm saying is extra it
00:21:58
has nothing to do with with the actual
00:22:00
error
00:22:02
um
00:22:04
did they change the TS config though
00:22:16
they added ignore patterns
00:22:19
to the eslintrc.cjs
00:22:31
I see so because they changed it to the
00:22:34
root they have to ignore dist because
00:22:37
before it was only looking in the source
00:22:39
directory okay I'm okay with those
00:22:40
changes I think the root true here is
00:22:42
extra but everything else I'm okay with
00:22:46
okay what you're looking at is somebody
00:22:48
that fixed the issue
00:22:50
all right I I don't know how useful that
00:22:52
was but
00:22:54
um old ultimately wacky eater I think
00:22:56
the advice is you got you kind of just
00:22:57
gotta dive in and
00:22:59
typically what I do is I only try to fix
00:23:01
the thing that is specifically the issue
00:23:03
and I only learn about the code base
00:23:05
that with the things that have to do
00:23:07
with the issue that I'm trying to fix
00:23:08
that's that's basically what basically
00:23:10
what I do
00:23:12
okay uh let's keep moving and thank you
00:23:14
for your question wackyator
00:23:17
um five says what what have you done in
00:23:19
your time off uh I went to Denver Fan
00:23:22
Expo I went camping I went hiking
00:23:27
um
00:23:28
I did some yard work cleaned up my house
00:23:31
a little bit
00:23:32
thing is I didn't even consider it time
00:23:34
off it was just like yeah I guess I
00:23:36
guess I won't stream that's basically
00:23:39
what happened
00:23:41
um but I'm back and I have streams
00:23:43
planned all this week so uh definitely
00:23:45
check out the schedule
00:23:47
live streams all over the schedule so
00:23:49
today I'm in the morning like the normal
00:23:51
time that I stream but tomorrow I'm
00:23:53
doing it in the evening this will be
00:23:54
friendly for people in
00:23:56
uh Asia and Australia uh
00:23:59
Wednesday midday stream Thursday early
00:24:01
morning stream
00:24:03
um and then Friday is uh back to your
00:24:06
regularly scheduled listed programming
00:24:07
okay
00:24:10
um let's pick another one to answer
00:24:15
uh nevitskar says what's my opinion on
00:24:17
Nick's OS I haven't heard of it
00:24:19
so
00:24:21
um let's look at it
00:24:23
reproducible builds and deployments
00:24:34
I don't know why I would use it and I
00:24:36
can't tell from their landing page so
00:24:37
that's my opinion on it
00:24:39
uh
00:24:41
so yeah
00:24:48
it's like Docker containers
00:24:53
in sabath uh thank you for the reason I
00:24:55
appreciate you did I miss any other
00:24:56
supports no I didn't okay this next one
00:24:58
comes from um uh Angels or angles
00:25:02
angels
00:25:03
I'm starting a coding bootcamp in a few
00:25:05
weeks for python do you think it's worth
00:25:06
spending the next few weeks studying
00:25:07
algorithms algorithms and maths before I
00:25:09
begin probably not
00:25:12
uh first of all it also it depends
00:25:15
because it depends on like the coding
00:25:16
bootcamp that you're going to like I
00:25:17
don't know what their curriculum is or
00:25:19
what they focus on there
00:25:20
um
00:25:21
and I actually I don't know how intense
00:25:23
it is or how long it is I used to teach
00:25:25
at a coding boot camp I didn't teach
00:25:27
python I taught JavaScript and if I had
00:25:29
advice for someone that was about to
00:25:30
start my boot camp
00:25:32
years ago when I was teaching there it
00:25:34
would probably be to uh relax
00:25:38
and enjoy your freedom like your free
00:25:41
time before the Boot Camp starts because
00:25:43
boot camps are are
00:25:45
um uh
00:25:47
uh
00:25:49
a lot a lot I didn't skip your question
00:25:51
oxy I'm just I'm picking ones that um I
00:25:54
want to answer right now but I will try
00:25:56
to answer your question later
00:25:59
um
00:26:01
yeah boot camps can be very intense and
00:26:03
it's going to take a lot of your time a
00:26:05
lot of your energy and
00:26:07
um you're already going to have to spend
00:26:09
so much time and energy once you start
00:26:11
and the thing is
00:26:12
um like if you went off to do some
00:26:15
self-study it's not gonna hurt right you
00:26:16
can study all that all you want but
00:26:18
typically with a coding boot camp they
00:26:21
have a plan for you right they they
00:26:25
specifically are going to like in the in
00:26:28
the boot camp is a a very specific
00:26:29
length and they've run it multiple times
00:26:32
before they've Run students through it
00:26:34
so they I would hope that they know what
00:26:37
the amount of time required to cover
00:26:38
specific topics and stuff like that so I
00:26:40
think that's another potential issue is
00:26:42
if you try to do this stuff with
00:26:43
self-study and then you start to learn
00:26:45
it in the course it could be potentially
00:26:48
a little bit confusing because maybe you
00:26:50
learned it slightly differently
00:26:52
um and all of that now
00:26:55
yeah so my advice is just relax relax uh
00:26:59
also if you if you if you have the
00:27:01
opportunity to or you know how to you
00:27:03
should reach out to your instructors or
00:27:06
the uh admissions people to say hey is
00:27:10
there anything
00:27:11
uh that you'd like me to do because
00:27:13
that's that's that's better that's a
00:27:14
better place to get the advice from is
00:27:16
the people that are actually going to be
00:27:17
teaching the course because they could
00:27:18
say well we expect you to be proficient
00:27:21
in these things and so if you're not
00:27:23
proficient in those things then that it
00:27:25
might make sense to spend your time
00:27:27
doing those things
00:27:28
but yeah
00:27:30
yeah and so uh Angel says uh appreciate
00:27:33
that sounds like it very sensible advice
00:27:35
it's going to be an intense course yeah
00:27:36
so
00:27:38
uh enjoy your free time while you have
00:27:40
it
00:27:42
and uh keep that attitude though right
00:27:45
because once you start the boot camp
00:27:47
like you're gonna you're gonna be
00:27:49
it's gonna be a lot it's gonna be a lot
00:27:51
so uh do your best
00:27:53
all that good stuff I think the one last
00:27:56
thing I'll mention though is like
00:27:57
um
00:27:59
from the teacher's perspective because
00:28:01
when I taught at a coding boot camp it
00:28:03
actually is like slightly more a lot of
00:28:06
times slightly more disruptive for the
00:28:07
class if there are students that like
00:28:09
already know the topics and they they
00:28:11
because they've potentially already
00:28:13
covered the topics before they don't
00:28:15
listen as well in class they potentially
00:28:17
think that they know more than the
00:28:19
instructor or that they can teach the
00:28:21
other students and that almost always
00:28:24
doesn't end well
00:28:26
um
00:28:27
so that's a that's a potential thing you
00:28:28
could run up against as well I would say
00:28:30
if you do know the topics that are being
00:28:32
covered don't act like you know it all
00:28:34
keep an open ear because
00:28:36
um there's probably still things you can
00:28:38
learn from your instructors and stuff
00:28:39
like that so yeah yeah be humble sit
00:28:42
down and learn
00:28:44
all right cool all right let's keep
00:28:45
moving
00:28:46
um
00:28:47
any non-streamed personal projects
00:28:49
exciting to you lately I'm gonna start
00:28:51
working on my my camper van again
00:28:54
um I honestly might stream some of it
00:28:56
though but right now I'm trying to
00:28:57
organize my
00:28:59
shed because it has all of my supplies
00:29:02
and tools I'm trying to get that
00:29:03
organized and then I'm trying to make a
00:29:05
plan
00:29:06
but that's exciting I hope I hope to
00:29:08
have my my camper van
00:29:10
um
00:29:12
uh
00:29:14
usable more usable than it is right now
00:29:16
so that's that's what I'm working on
00:29:19
anything else
00:29:21
um
00:29:24
no that's mainly it
00:29:25
yeah
00:29:28
who
00:29:30
um can I do a spell stream without
00:29:32
spelkit
00:29:34
yeah I want to do this eventually the
00:29:37
thing is like
00:29:39
I guess that's that's the funny thing
00:29:41
about like all this felt kit stuff that
00:29:42
I've been doing I've barely been
00:29:44
touching spelled right
00:29:46
most of what I've been doing is like
00:29:48
devops and testing and it almost has
00:29:50
nothing to do with folkit
00:29:52
but I know there are some of you that
00:29:54
would be would like to see in an intro
00:29:57
to like how to build apps with felt and
00:30:00
like what's felt is and how it works
00:30:01
I'll do that eventually
00:30:03
um will we do it today
00:30:05
maybe I'll keep your question here maybe
00:30:07
if we're looking for some code to write
00:30:09
we'll do like an intro to spell like a
00:30:10
quick one
00:30:12
all right
00:30:14
um
00:30:28
yeah
00:30:30
um I I don't know if I have a good
00:30:31
answer for this one because I I don't do
00:30:33
a lot of low-level development what's
00:30:35
the most important thing I should focus
00:30:36
on in the C language
00:30:38
I would say though if you're a new
00:30:40
programmer like this is your first
00:30:42
programming language
00:30:44
um then you should focus on programming
00:30:46
fundamentals like uh conditionals
00:30:49
variables functions iterators
00:30:54
um
00:30:58
like dictionaries and hash Maps or in
00:31:01
the JavaScript world they're just called
00:31:02
objects Loops
00:31:06
um you still want to answer their
00:31:06
question yeah so uh so do you do a lot
00:31:09
of C finder the I swing
00:31:11
how to use pointers to allocate and
00:31:12
deallocate memory yeah so and that's the
00:31:14
thing like with C with the C programming
00:31:16
language you're doing man typically
00:31:17
doing manual memory management which is
00:31:20
not something you have to do in higher
00:31:21
level languages like uh JavaScript which
00:31:23
is what I use most often uh so yeah
00:31:25
learning about pointers and memory
00:31:28
allocation that's probably some of the
00:31:30
most important stuff
00:31:31
yeah and as mutable agrees with all of
00:31:33
that cool
00:31:35
what's the difference between an
00:31:36
iterator and a loop
00:31:38
um
00:31:39
I think an iterator can be a specific
00:31:42
type of thing that iterates but I
00:31:46
uh Loops are a form of iteration that's
00:31:48
basically what I was saying
00:31:50
um
00:31:51
I don't know if I said iteration and
00:31:52
Loops but they're kind of the same thing
00:31:54
in certain programming languages you can
00:31:56
have an iterator which
00:31:58
basically allows itself to be iterated
00:32:01
on
00:32:03
but you should just know about loops
00:32:04
that's basically all I'm saying yeah so
00:32:06
like in in Java and c-sharp I think you
00:32:09
can even have iterators in in JavaScript
00:32:11
it's specifically an object that has
00:32:13
that either implements an iterator
00:32:15
interface or has specific methods that
00:32:17
allow it to like allow the outside world
00:32:20
to say like give me the next thing or go
00:32:21
on to the next thing
00:32:23
so yeah
00:32:25
so hopefully that helped helped
00:32:28
all Loops iterate but not all iterators
00:32:30
Loop
00:32:32
I guess so but the thing is in
00:32:34
specifically an iterator honestly we
00:32:36
should look it up on on Wikipedia
00:32:38
uh
00:32:40
an iterator is an object that enables a
00:32:43
programmer to Traverse a container
00:32:44
particularly lists
00:32:48
yeah so okay I have a good
00:32:51
um I have a good a better description of
00:32:53
this in JavaScript an array is an
00:32:58
iterator
00:32:59
because if you to if you were to do a a
00:33:04
for for of or for in Loop
00:33:09
um
00:33:11
this works on iterable objects
00:33:14
so iterable the iterable protocol
00:33:16
basically says that this object
00:33:19
implements symbol.iterator
00:33:22
um and
00:33:24
uh it implements like a next method and
00:33:27
a it has a done property and a value
00:33:29
property so behind the scenes when you
00:33:32
pass something into a four of as long as
00:33:35
it implements the iterable protocol
00:33:39
this code will work
00:33:41
like you could you could literally
00:33:42
create your own object and have a custom
00:33:46
way of iterating so so when someone
00:33:48
passes your iterable into a four of loop
00:33:51
uh you could have code behind the scenes
00:33:53
that basically determines what that
00:33:55
element value will be
00:33:57
if that's over your head then don't
00:33:59
worry about it just focus on the
00:34:01
fundamentals um but yeah that's that's
00:34:03
what an iterator or an iterable is yeah
00:34:09
yeah and I think specifically forage is
00:34:12
Implement at least in JavaScript it's
00:34:13
implemented on arrays
00:34:16
it's not on all iterables
00:34:19
but for each is an example of something
00:34:22
that would could be op could operate on
00:34:24
a on an iterable if that makes sense
00:34:27
um all right what do I want to answer
00:34:29
next
00:34:34
I'll answer this one just because I
00:34:35
don't I don't think I have any good
00:34:36
advice for this webneet says I built
00:34:39
some projects but learned that I need to
00:34:40
also be good at building hype and
00:34:42
advertising my stuff if I want people to
00:34:43
use them
00:34:45
any advice on how to do that uh I
00:34:48
generally posted on Reddit Hacker News
00:34:49
and Twitter anything else I should do
00:34:51
yeah this is the thing so myself as a
00:34:54
content creator
00:34:55
um I basically have to be a social media
00:34:59
marketer
00:35:00
to get my stuff in front of people's
00:35:02
eyes and get them like wanting to watch
00:35:04
and watch my stuff and consume my stuff
00:35:07
so uh I don't I don't think I have any
00:35:09
good advice in like on it because I'm
00:35:11
not a very good Advertiser uh but I
00:35:13
think you have you have the right idea
00:35:14
that's basically what you need to do is
00:35:16
it needs to be post posted in multiple
00:35:18
places you need to get people talking
00:35:19
about it
00:35:20
um I think the other thing is you need
00:35:23
to make sure that you have a good
00:35:25
elevator pitch for like what your thing
00:35:27
is so like if I go to your website or if
00:35:31
I go to your GitHub repo
00:35:33
in the first 20 seconds I want to know
00:35:37
what what it is and like why why it is I
00:35:40
should be interested in your project
00:35:43
explain your thing in 15 minutes or in
00:35:45
15 seconds or less and your website and
00:35:47
your GitHub repo should do the same
00:35:48
thing
00:35:49
um if it doesn't like if it takes me
00:35:51
like a while to like figure out like
00:35:53
what does this even do why would I need
00:35:56
this then it's it's going to be very
00:35:58
hard for for me to decide okay let me
00:36:01
look deeper into this and then also
00:36:03
decide oh I I like this let me share it
00:36:05
with someone else so I think it's
00:36:06
probably the first the first thing you
00:36:09
should focus on if you haven't yet is um
00:36:12
make sure you have a good elevator pitch
00:36:14
make sure you have a make sure it's
00:36:16
really easy to understand what your
00:36:18
thing does and why it's useful for
00:36:19
people up front
00:36:23
um
00:36:25
yeah and and you'd be able to explain it
00:36:27
so the Richard Feynman style is like
00:36:29
explaining it for like complete
00:36:32
beginners in a way like basically
00:36:34
explaining things in a way that don't
00:36:35
require a lot of previous like
00:36:37
understanding or knowledge or um yeah or
00:36:39
experience or knowledge
00:36:41
but yeah for example this NYX OS thing
00:36:43
that somebody told me about they're like
00:36:45
hey what do you think about this all
00:36:47
right I go here it says reproducible
00:36:49
builds and deployments when I read this
00:36:51
because I'm familiar with docker
00:36:54
that's where my mind goes to like all
00:36:56
right is this a replacement for docker
00:36:59
um and then it says NYX is a tool that
00:37:00
takes a unique approach to package
00:37:01
management and system configuration all
00:37:04
right but then when I read that I'm like
00:37:05
well I don't typically use Docker for
00:37:07
package management but I guess you could
00:37:09
because inside of a Docker container
00:37:11
like you're managing its dependencies so
00:37:13
yeah but but this makes me think it's
00:37:15
for something else that's not like
00:37:17
docker
00:37:18
uh learn how to make reproducible
00:37:19
declarative and reliable systems this
00:37:21
line makes me think okay this is
00:37:22
basically just Docker so I think if
00:37:26
we're talking about this problem for NYX
00:37:28
OS I mean actually I have I have no idea
00:37:30
how popular nixos even is
00:37:32
like maybe it's really popular I have no
00:37:34
idea this is my first time hearing about
00:37:36
it but I think for for NYX OS
00:37:38
specifically like if their target
00:37:40
audience is people that already use
00:37:42
Docker and they need to switch to it
00:37:45
um then
00:37:46
that should be kind of like how they
00:37:48
should sell me on it uh and then they're
00:37:51
not doing that
00:37:52
um and now I have to watch a video to
00:37:54
understand wondering how to start using
00:37:58
Nyx
00:37:59
yes but I didn't need to see you type
00:38:01
that I mean obviously I'm being very
00:38:02
critical right now but it's like that's
00:38:04
why I clicked away from this I don't
00:38:05
know what it does I don't know how I'm
00:38:06
gonna benefit from it so so I'm I'm not
00:38:09
going to spend the time learning it now
00:38:10
if someone else comes along and they
00:38:13
they create like an example that like
00:38:16
really really shows the use case for NYX
00:38:18
and like why I should use it
00:38:20
um and all that then then that would
00:38:23
help but yeah I mean we're seeing an
00:38:25
example of like I mean I hate to be
00:38:27
critical of it but that's basically it's
00:38:28
like
00:38:29
that's kind of what we're dealing with
00:38:31
here is like I show up I actually don't
00:38:33
even know what it's for or why I would
00:38:34
use it
00:38:35
and then I move on
00:38:38
yeah
00:38:39
um
00:38:41
like so I mean to to give an example
00:38:43
like because I'm familiar with Docker
00:38:45
and because I'm familiar with like
00:38:46
Docker compose and like yaml
00:38:48
configuration and everything else I
00:38:50
would think maybe that's their target
00:38:52
audience so if that's the case then
00:38:55
maybe they show an example on their
00:38:57
landing page that like shows how you
00:38:58
would replace Docker with Nyx
00:39:02
um
00:39:03
so yeah replit uses Nyx
00:39:08
a tool for managing software packages
00:39:09
and system configurations
00:39:11
fastening
00:39:13
fascinating
00:39:18
I see so you can have multiple versions
00:39:19
of like node installed at the same time
00:39:21
I have a specific tool that already does
00:39:24
that I use node version manager
00:39:28
I guess I guess we'll we'll watch this
00:39:31
here are a few examples
00:39:36
node
00:39:37
console log that
00:39:40
interesting no node on this machine
00:39:44
I get it so here's the thing
00:39:47
this is cute right it's cute that it's
00:39:49
typing out
00:39:50
I I'm a very fast reader I don't want to
00:39:52
have to wait for every yeah I don't have
00:39:54
to I don't have to wait for every letter
00:39:55
to show up
00:39:57
um show it to me
00:40:00
yeah I would call this cute not useful
00:40:05
um
00:40:06
oh I see so yeah so then you can say
00:40:08
give me node.js and now they have
00:40:11
node.js
00:40:14
so it's not a Docker replacement
00:40:25
okay let's build a minimal Docker image
00:40:27
with Nyx
00:40:37
they built a redis image
00:40:41
with Docker but where did NYX come into
00:40:43
play
00:40:46
this is basically what I mean I'm I
00:40:48
don't know like I I could be missing
00:40:49
something but I still don't understand
00:40:51
like I I get the use case now where uh
00:40:54
if I need node.js and I don't want to
00:40:56
install it directly I can use NYX to do
00:40:58
that and then potentially have multiple
00:40:59
versions installed and then also have a
00:41:01
configuration for my project that says I
00:41:03
use this specific version of node and
00:41:05
then when someone else comes along they
00:41:06
can spin up that specific version of
00:41:07
node
00:41:08
is fine seems fine
00:41:11
uh but I didn't get that from their
00:41:14
value from their from their elevator
00:41:16
pitch so honestly I think I'll stop
00:41:18
talking about this now but that's that's
00:41:19
basically my advice it's like
00:41:21
I need to know up front what this thing
00:41:23
does and like why I should spend my time
00:41:25
learning it or even like looking into it
00:41:28
um
00:41:29
and then beyond that you absolutely
00:41:31
share it on Reddit shared on Hacker News
00:41:33
uh I think the other thing is like if in
00:41:35
terms of sharing it on social media like
00:41:37
Twitter if you can get buy-in from
00:41:39
Twitter accounts that have a lot of
00:41:40
followers right so if you get someone in
00:41:43
the dev community that
00:41:46
um already has a big following you reach
00:41:48
out to them potentially they see your
00:41:51
thing they like what you've done and
00:41:53
then they talk about it that's another
00:41:54
way to drum up interest
00:41:56
um and then on Reddit just create a
00:41:57
bunch of fake accounts and like
00:42:00
um take talk like you're interested in
00:42:03
the project because that's what most
00:42:04
people do there are so many bots on
00:42:06
Reddit I guess it's going to be harder
00:42:07
to create Bots these days because of how
00:42:09
they because of the API changes but
00:42:11
Reddit is just a bunch of fake users of
00:42:13
voting and commenting on things uh
00:42:16
whereas if you come along and you see
00:42:18
that you don't realize that it's
00:42:19
actually fake people talking about it
00:42:22
and then from what I've seen lately
00:42:24
Hacker News is just turning into Reddit
00:42:25
like people are really negative and I
00:42:28
don't know I'm gonna stop talking about
00:42:29
this but hopefully that gave you a
00:42:30
little bit of insight web neat is like
00:42:33
not only do you have to like advertise
00:42:34
it everywhere but you have to very
00:42:36
quickly sell people on what your thing
00:42:38
is and why it's useful and why they
00:42:40
should even care about it yeah btrsl is
00:42:43
asking what's the next thing in
00:42:44
programming not including AI I have no
00:42:47
idea
00:42:49
yeah I have no idea I think it I think
00:42:51
it is it is AI it's it's AI generated
00:42:53
code stuffs I think that's the next
00:42:55
thing in programming
00:42:57
um everything else is just a an
00:43:01
iteration on things that already exists
00:43:03
like barely anything is new
00:43:06
spatial computing
00:43:09
I don't even know what that is but it
00:43:10
sounds interesting
00:43:12
it's true Dana true and I think that's
00:43:14
basically the point I was getting at
00:43:15
it's like yeah people have really short
00:43:17
attention spans you gotta you gotta hook
00:43:19
them quick or you lose them
00:43:21
so yeah I don't I don't have a I don't
00:43:22
have an opinion on this
00:43:24
um JavaScript Frameworks might finally
00:43:26
take off
00:43:27
yeah
00:43:28
the thing is like the Apple Vision Pro
00:43:31
is just VR actually there was a really
00:43:33
good video by uh MKBHD
00:43:36
he talks about how Apple did not use the
00:43:40
term VR or virtual reality once in their
00:43:44
entire announcement and that's because
00:43:46
there's already a lot of stigma around
00:43:48
VR and virtual reality so when Apple
00:43:51
released the Apple Vision Pro they came
00:43:52
up with all these new words and terms
00:43:54
it's just virtual reality with
00:43:56
pass-through but the thing is it's not I
00:43:58
don't think it's more AR because it's
00:44:00
just paths pass through video right it's
00:44:02
and there are already VR headsets that
00:44:04
can that can do that
00:44:06
it's kind of AR
00:44:08
it can like float things in your
00:44:10
environment but that's very different
00:44:12
from the AR that that like hololens does
00:44:15
where like it Maps an entire environment
00:44:17
and can like put digital objects on a
00:44:19
table or on the floor and it knows the
00:44:21
differences between them and stuff like
00:44:22
that
00:44:23
um that to me that's augmented reality
00:44:26
overlaying a movie screen or a computer
00:44:28
window in your current environment is
00:44:31
way less augmented reality than actually
00:44:34
interpreting the environment and having
00:44:36
like 3D objects interact with the
00:44:38
environment uh as if they know the
00:44:41
layout you know that's that you know
00:44:43
that's that's really all I'm saying so
00:44:45
what's the next thing I don't know I I
00:44:47
don't know
00:44:50
um let's see what else
00:44:54
uh hamster boy is asking uh when you
00:44:56
build a project with a microservice
00:44:58
architecture should each microservice
00:44:59
have a separate repository uh I have not
00:45:04
um built the thing with a microservice
00:45:05
architecture I would think you probably
00:45:07
want to use
00:45:09
um a mono repo tool
00:45:11
because a lot of times those
00:45:12
microservices probably have
00:45:15
common dependencies and like you might
00:45:17
your team might work on a a single
00:45:19
Library that's used by multiple of the
00:45:21
microservices so it would make sense to
00:45:23
be in a mono repo
00:45:25
uh not a monolith a mono repo with a
00:45:28
tool like NX or Turbo repo or lerna if
00:45:30
that's still relevant
00:45:32
because so
00:45:34
I haven't built something with a
00:45:36
microservice architecture but I did
00:45:37
build something for a client a few years
00:45:40
back that had multiple pieces to it like
00:45:42
it had three apis it had three different
00:45:45
front-ends
00:45:47
um it had like a shared database library
00:45:49
and I had the easiest time working with
00:45:52
everything when it was in a mono repo
00:45:54
because the first thing I did was have
00:45:55
everything in a separate repo and then
00:45:58
use like git
00:46:00
installs as dependencies between them
00:46:02
but if you're iterating fast and those
00:46:04
dependencies are changing often it's
00:46:07
really cumbersome to manage uh like npm
00:46:11
dependencies between projects and stuff
00:46:12
like that so yeah I would suggest use a
00:46:14
mono repo I don't know if anybody in
00:46:15
that in the chat has a
00:46:17
uh a
00:46:19
similar thought on on micro uh
00:46:23
microserver's architecture
00:46:25
yeah so webneet says use a mono repo
00:46:27
separate repos or a nightmare um in my
00:46:29
experience yes but again it wasn't
00:46:31
microservices but it was services that
00:46:34
all needed to like talk to each other I
00:46:36
guess you probably could have called it
00:46:37
microservices I don't know
00:46:40
um
00:46:42
what's a Veritas what i t stuff do you
00:46:45
enjoy recently
00:46:47
uh
00:46:49
Chad Chad Dev he's on Twitch I don't
00:46:52
know if he streamed recently
00:46:55
but he let me borrow his drone so I'm
00:46:59
getting more interested in drones now
00:47:00
and if you watch my recent YouTube video
00:47:03
um
00:47:04
actually let me just play the intro I'm
00:47:06
I'm really proud of my editing and then
00:47:09
I'm I'm really happy with the uh the
00:47:12
Drone footage that we got well we were
00:47:15
we were out camping because I went
00:47:16
camping with Chad recently
00:47:17
yeah drones are cool so I'm gonna learn
00:47:19
more about them I'm gonna make sure I
00:47:20
have all the right certifications and
00:47:22
everything else
00:47:23
to to do do the Drone thing but um
00:47:27
uh watch this intro
00:47:50
Hello friends welcome to coding Garden
00:47:52
uh we're out early to catch the sunrise
00:47:54
and also answer some of your coding
00:47:55
questions so let's get to it
00:48:07
it's unreal that
00:48:10
that I was literally the one flying the
00:48:12
Drone to to catch to get these shots
00:48:17
and then this is just me walking
00:48:19
um
00:48:25
but yeah drones are cool drones are
00:48:27
really cool uh there's let me show you
00:48:29
this other shot that we got
00:48:31
um
00:48:34
where was it
00:48:39
yeah this one
00:48:42
you go you can get really
00:48:45
it's like this and and this is all this
00:48:47
is unreal so this Chet is the one that
00:48:50
got this shot this was on his
00:48:52
um
00:48:53
oh you guys are seeing an ad oh wait
00:48:56
um
00:48:57
this was on his air 2s drone
00:49:01
uh and it was sunset
00:49:03
just enjoying the outdoors now I will
00:49:06
admit there could be bad parts of
00:49:07
camping like is this a movie no no like
00:49:10
it doesn't look real no like like the
00:49:12
thing is I was there I was I was I was
00:49:14
at the campsite while he was flying his
00:49:16
drone and getting these shots it's
00:49:18
amazing
00:49:20
this is all part of it uh and then
00:49:23
I think I added some drone shots in
00:49:26
I I got real I got really like
00:49:29
clever at some points kind of
00:49:31
pretentious with the editing
00:49:32
um
00:49:34
yeah like this
00:49:36
what you've done is good enough
00:49:38
according to your own terms according to
00:49:40
the business terms uh then you can you
00:49:42
can stop there
00:49:43
um but yeah rewriting
00:49:46
redoing is almost never a good choice
00:49:48
like humans are really bad at estimating
00:49:51
and projecting and so you're like oh
00:49:55
uh I don't think so America 2050
00:49:57
um it just literally has that many like
00:50:00
if we refresh it might go up
00:50:02
it's gone up it's
00:50:03
[Laughter]
00:50:07
uh
00:50:08
but yeah I'm proud of that footage I'm
00:50:10
proud of that video
00:50:12
um
00:50:13
yeah we made it to a thousand
00:50:15
yeah thanks everybody thanks for your
00:50:16
watches but yeah if you can click click
00:50:18
that link watch the latest YouTube video
00:50:20
why was I talking about that because
00:50:21
drones drones are cool I want to learn
00:50:24
more about them I want to get better at
00:50:26
flying them and I want to get all the
00:50:27
right certifications and everything so I
00:50:28
can get cool footage because
00:50:30
um like I want to make more YouTube
00:50:32
videos that
00:50:34
like have footage
00:50:37
of the world in them with like
00:50:39
commentary from me
00:50:41
and
00:50:42
um that's kind of what I'm interested in
00:50:44
I'll probably I'll probably learn more
00:50:45
about like
00:50:46
cameras and stuff like that
00:50:49
because right everything in that video
00:50:50
was filmed just on my phone but it'd be
00:50:52
nice to
00:50:53
get a nice camera and get into that too
00:50:55
so that's mainly what I'm interested in
00:50:59
Trello Drew what's up crafty Becky
00:51:04
oh the Tello
00:51:06
oh you can program it yourself
00:51:09
wait it's only a hundred dollars
00:51:11
come on you're too kind
00:51:15
thank you thank you for the gifts that's
00:51:16
awesome congrats to everybody that got
00:51:18
gifted
00:51:20
um
00:51:21
yeah this is cool you can program it
00:51:29
yeah this needs to be fixed in the
00:51:30
overlay these empty messages
00:51:34
it's for beginners and programmers cool
00:51:38
but does it have a camera
00:51:43
oh well
00:51:44
uh all right let's keep let's keep
00:51:46
answering
00:51:52
all right let's answer this one from
00:51:54
schools news who says learner here still
00:51:57
not working in the industry as a Dev
00:51:59
I struggle completing and styling
00:52:01
projects once I can see the path and
00:52:03
learn what it's trying to teach I get
00:52:05
eager to move on to the next concept or
00:52:07
project what's an appropriate way to
00:52:09
balance forward momentum and wrapping up
00:52:11
a learning project
00:52:13
I think first of all so I think uh
00:52:17
let me let me Target exactly what you're
00:52:19
saying here because uh so once I see the
00:52:23
path and learn what it's trying to teach
00:52:25
well um
00:52:27
yeah once I can see the path and learn
00:52:28
what he's trying to teach I get eager to
00:52:29
move on the next thing so basically what
00:52:31
you're saying is uh you feel like you've
00:52:35
already you already understand the thing
00:52:37
that you were trying to learn
00:52:39
and you can see the next thing so like
00:52:42
you're just like ah I'm not gonna worry
00:52:43
about that anymore I'm just gonna learn
00:52:44
the next thing because I feel like I've
00:52:46
already learned that other thing
00:52:48
um I think you should get in the habit
00:52:50
of really checking your understanding
00:52:52
because it can be so easy
00:52:55
to just think that you understand a
00:52:58
topic because an instructor explained it
00:53:01
really well or a video explained it
00:53:03
really well but you can't really say you
00:53:06
understand that thing until you've
00:53:08
actually tried to do it and implemented
00:53:10
it yourself so I I think you should you
00:53:12
should try to focus more on
00:53:14
um
00:53:16
um well not focus more on start to think
00:53:18
about and really
00:53:20
uh ask yourself do I understand this
00:53:23
topic like in in the way that you do
00:53:25
that is to show that you can actually do
00:53:27
it
00:53:27
without uh watching a video or reading a
00:53:31
tutorial
00:53:32
um because if you can't then that means
00:53:34
you haven't you haven't mastered those
00:53:36
Concepts yet that means that even though
00:53:37
you want to move on to the next thing
00:53:39
you still haven't
00:53:40
uh mastered the thing that you were
00:53:42
working on before
00:53:44
so
00:53:45
um an appropriate way to balance forward
00:53:47
momentum and wrapping up realize that
00:53:50
like if you just keep going on to the
00:53:53
next thing and and not and you don't
00:53:55
solidify your understanding of the
00:53:58
things that it builds on top of at a
00:54:00
certain point you're gonna have a basis
00:54:02
of knowledge that is built on a very
00:54:05
um
00:54:06
uh
00:54:08
uh and and not what's the word
00:54:11
I was going to use like building
00:54:13
analogies
00:54:14
um
00:54:15
you are you're you're basically building
00:54:18
on a a shady uh Foundation a flimsy
00:54:22
Foundation I like the word flimsy right
00:54:24
so like each thing that you move on to
00:54:26
probably had some dependencies on the
00:54:28
thing that you were learning before that
00:54:30
and if you haven't solidified those
00:54:31
you're just moving on and now you have
00:54:33
this really flimsy structure that
00:54:35
everything's built on top of and
00:54:36
eventually you're gonna hit a point
00:54:38
where it really tests your understanding
00:54:40
and then and then the the tower crumbles
00:54:43
if we're using building analogies
00:54:46
so an appropriate way to balance it is
00:54:48
to make sure that you actually do have
00:54:51
decent Mastery before moving on
00:54:54
um and because yeah yeah so uh excuse me
00:54:57
it says perfect makes total sense I
00:54:58
think I have a hard time with rabbit
00:54:59
holes and trying to deeply understand
00:55:01
something before moving on yeah and I
00:55:03
think it's it's a fine balance right
00:55:04
it's either it's either like you you
00:55:07
only like
00:55:08
cover it slightly and then move on
00:55:10
directly or you just like dive way too
00:55:12
deep
00:55:14
yeah yeah so it's it's it's two sides of
00:55:16
that but I but I think uh you should
00:55:19
have some kind of mechanism to
00:55:22
keep that front of mind like keep keep
00:55:24
the end goal in front of mine right
00:55:26
because like uh learning all of these
00:55:28
Concepts in like one after another
00:55:29
there's some in goal right I think
00:55:31
ultimately like you're in goal for some
00:55:33
of this stuff is like you want to build
00:55:34
a project of a specific kind and so if
00:55:38
you ask yourself when you're like
00:55:40
potentially in a rabbit hole or
00:55:42
something else like that like is this
00:55:45
will this be effective to get to my end
00:55:47
goal and if it's not you know maybe you
00:55:50
need to get out of that rabbit rabbit
00:55:51
hole
00:55:52
yes a Jenga a jenga-like structure
00:55:57
um
00:55:58
uh you need co-workers to learn better
00:56:00
with people with experience I don't know
00:56:01
if that was a reference to yeah
00:56:04
yeah I like this from nsmutable so do
00:56:05
deliberate practice repos write it in
00:56:08
your own words and examples yeah like a
00:56:10
lot of people don't realize like this is
00:56:12
why when you're in school you often hear
00:56:16
in your own words describe X
00:56:19
the reason that we do that
00:56:22
is because uh it forces you to prove
00:56:26
that you actually understand something
00:56:28
right because it's super easy to just
00:56:31
reiterate exactly what someone else said
00:56:33
or like exactly something that you read
00:56:35
or something that you watched
00:56:37
but it takes a completely different part
00:56:38
of the brain to be able to
00:56:41
uh say it in your own words and in your
00:56:43
own understanding potentially with your
00:56:45
own analogies that really proves that
00:56:47
you actually do understand it
00:56:54
cool oh cool the teller drone has a
00:56:55
video that's good to know
00:56:59
oh thank you thanks for being here
00:57:02
basically it was like my summer break I
00:57:04
guess
00:57:06
yeah C1 D1 teach one yeah
00:57:10
so you see somebody do it either an
00:57:13
instructor or in a video
00:57:15
um or you read it in an article do it
00:57:18
yourself and then also teach it and that
00:57:20
really shows that you actually
00:57:21
understand it
00:57:26
I can never say precisely what someone
00:57:27
else said that being said I was bad at
00:57:29
school yeah and I mean I think like
00:57:32
paraphrasing is a good form of like
00:57:34
showing your understanding
00:57:36
because it shows that you were able to
00:57:38
pick out the key points in your in your
00:57:40
summary
00:57:42
um
00:57:43
but
00:57:45
yeah yeah so yeah hopefully that helps
00:57:47
because news thanks for your question
00:57:50
um let's see
00:57:58
are you streaming on Twitch right now
00:57:59
Omar
00:58:00
are you new to Twitch
00:58:03
um
00:58:06
yeah you shouldn't uh maybe maybe you're
00:58:09
new to twitch but you should not uh
00:58:11
advertise yourself in other people's
00:58:13
streams
00:58:15
just rude
00:58:17
I'm live right now and your message will
00:58:20
get people to leave my stream and go to
00:58:22
your stream
00:58:23
you don't want to do that
00:58:24
um you want to you want to build
00:58:25
relationships so like if you hang out in
00:58:27
the chat you answer people's questions
00:58:28
or you're kind or you ask questions
00:58:30
eventually people will see oh
00:58:32
that uh that person in the chat was cool
00:58:34
maybe I'll click on their username and
00:58:36
see that they're streaming but you don't
00:58:37
you don't want to just advertise
00:58:39
yourself in other people's streams
00:58:43
are you the one that asks this actually
00:58:45
I'll play this video next I'll play this
00:58:47
because uh it got it got cut from the
00:58:50
video so harsh asks how to handle
00:58:52
transactions in Super Bass
00:58:55
um and this is easy to answer because I
00:58:58
already answered it
00:59:00
um in a video so I'm gonna play you all
00:59:02
that clip now uh but the video it didn't
00:59:04
make it to YouTube I wanted to edit the
00:59:06
video down to be like shorter
00:59:10
um
00:59:11
so it didn't it didn't make it in the
00:59:13
edit I'm going to show you something
00:59:14
that no one has seen before
00:59:16
that didn't make it in the recent uh
00:59:19
YouTube video
00:59:38
all right
00:59:39
is everyone ready
00:59:42
yeah this is the director's cut
00:59:46
um
00:59:47
is the sound on
00:59:50
all right I'll turn to turn me off too
01:00:00
you can you can take for the rest of
01:00:02
your life especially if you haven't done
01:00:03
camping before
01:00:05
so the next question is from harsh and
01:00:07
I'm gonna sit down for this Wednesday
01:00:08
just to make sure that I can answer it
01:00:10
all right harsh asks how do you handle
01:00:12
transactions in Super Bass so if you're
01:00:15
not familiar transactions are a way of
01:00:17
doing multiple things in a database and
01:00:20
then undoing the first things you did if
01:00:23
some of the last things you did failed
01:00:25
so you have multiple things you want to
01:00:27
do you start the transaction they start
01:00:30
to work if one of the things fails
01:00:31
everything you did gets rolled back
01:00:33
rollback is the term we use to describe
01:00:35
what happens when those queries
01:00:36
essentially get undone personally I
01:00:37
haven't tried to do this in Super Bass
01:00:39
But I looked into it on my LTE
01:00:40
connection out here in the woods and you
01:00:43
basically have two options so the first
01:00:45
one is you can create a stored procedure
01:00:47
and then do RPC so a third procedure is
01:00:50
basically a way of writing a function
01:00:51
that lives inside of a database and you
01:00:53
can do that with Super Bass so super
01:00:55
bass is essentially like managed
01:00:56
postgres so in their dashboard they
01:00:58
actually have a place where you can
01:00:59
write stored procedures and then you can
01:01:00
actually call those store procedures
01:01:02
from the client library now if you're
01:01:04
new to this you may be cautious because
01:01:06
you're like why would I write code in my
01:01:08
SQL database but before the days of like
01:01:10
SQL code living and application code
01:01:13
like in our node.js app with an orm or
01:01:16
even just like a database driver or
01:01:17
something like that and I mean and I say
01:01:20
in the days before people still do it
01:01:22
this way you people write a direct SQL
01:01:24
and a lot of database devs want that
01:01:26
logic stored in the database for one
01:01:28
it's going to be quicker because it's
01:01:29
executing directly in the database
01:01:31
versus having to be executed like in
01:01:33
node.js or in Java or in c-sharp that
01:01:36
then goes across a database driver to
01:01:38
communicate with the database so some
01:01:40
people actually do prefer to write their
01:01:41
logic in the database the other thing
01:01:43
about that is it will kind of force you
01:01:44
to learn more about postgres so you'll
01:01:46
essentially be forced to learn some of
01:01:49
the postgres specific SQL dialect and
01:01:52
also learn what stored procedures are
01:01:54
and different things like that so I
01:01:56
think it's worth exploring but depending
01:01:58
on how complex your your transaction
01:02:01
needs to be it may be more difficult to
01:02:04
implement right because basically we the
01:02:06
story procedure you have certain inputs
01:02:08
and then you give certain outputs so if
01:02:10
you can't really work your solution into
01:02:12
that format you might need to do
01:02:14
something else the other option is to
01:02:16
write your code that has a transaction
01:02:18
and put it into a serverless or an edge
01:02:21
function or just deploy a node.js API
01:02:23
that talks directly to the postgres
01:02:25
database that actually backs your super
01:02:27
based database so if you didn't know
01:02:28
this uh Super Bass is just based on top
01:02:30
of postgres you can actually go into
01:02:32
your settings get the direct postgres
01:02:34
connection URL and connect directly to
01:02:37
the database so you could literally
01:02:38
write a back-end application that talks
01:02:41
to your postgres database and in some
01:02:44
serverless function or in an Express
01:02:46
request Handler you could write the code
01:02:48
that does a transaction so for instance
01:02:49
you could install the PG Library you
01:02:52
could look at their docs see how
01:02:54
transactions are done and then write a
01:02:57
serverless function or a request Handler
01:02:59
that does the transaction and then now
01:03:01
you can just call that from your
01:03:03
front-end code
01:03:04
now this is a bit more complex because
01:03:06
now you also have to deal with auth
01:03:07
right so one of the the benefits of
01:03:09
using something like super bass is that
01:03:11
it's database as a service and it has
01:03:13
row level security in the database
01:03:15
itself which basically allows you to
01:03:17
lock down the reads and the rights that
01:03:19
happen to specific tables
01:03:22
uh so that you can make those queries
01:03:24
from the front end the moment you start
01:03:25
doing things in your own back end you
01:03:28
now have to start dealing with
01:03:30
authentication and also like doing
01:03:31
things on behalf of the user that made
01:03:33
the request which is doable but you now
01:03:35
just need to integrate that same auth
01:03:36
code into your back end so that the
01:03:38
request made from your front end are on
01:03:40
behalf of the correct user and have the
01:03:42
right privileges and everything else but
01:03:43
this is definitely a viable option
01:03:44
especially if you already know node.js
01:03:46
in JavaScript you can write a little
01:03:48
serverless function and deploy it to
01:03:49
Verso or netlify functions or Firebase
01:03:52
functions or of course Super Bass
01:03:53
functions which I didn't think about but
01:03:54
Super Bass also has a functions offering
01:03:56
so you could write some back-end code
01:03:58
that does a transaction stored in a
01:04:00
super based function and then call that
01:04:01
from your front-end code and now that I
01:04:03
think about it they probably have a way
01:04:04
to tie that into auth as well I don't
01:04:06
know I haven't used it but those are
01:04:07
some of your options hopefully that
01:04:09
helps and I guess I didn't address it to
01:04:11
begin with because you might be asking
01:04:12
the question like why doesn't the super
01:04:14
super bass SDK support transactions to
01:04:16
begin with well Super Bass is actually
01:04:18
based on top of postgresst which is a
01:04:21
open source library that takes a
01:04:23
postgres database and turns it into a
01:04:25
rest API so superbase is just using that
01:04:27
mechanism to give you this database as a
01:04:30
service with a bunch of other stuff
01:04:31
added onto it and a bunch of other open
01:04:33
source packages that are assembled
01:04:34
together to make it a more seamless
01:04:36
experience so if you look at the
01:04:37
postgres repo there actually are some
01:04:39
open issues where people are asking well
01:04:41
when are you going to support
01:04:41
transactions and for the way that
01:04:43
postgres is architected it's a pretty
01:04:45
technically hard solution to come up
01:04:47
with which is why it doesn't exist in
01:04:49
postgres yet but I'll link that issue in
01:04:52
the description you can read more about
01:04:53
it but essentially it's not supported
01:04:55
directly but you do have some other
01:04:56
options
01:05:03
hello again
01:05:05
um hopefully that helped I think I'll
01:05:07
post some put some links in the uh
01:05:10
um
01:05:14
wait there there
01:05:16
was a
01:05:19
um
01:05:20
a coding Garden exclusive
01:05:24
no no no no that was that was an edit
01:05:27
from
01:05:29
that was an edit
01:05:31
um yeah so okay but let me give you a
01:05:32
few links so if you look at Super Bass
01:05:35
um look in their docks
01:05:38
and specifically if you click on
01:05:39
database and then uh managing database
01:05:42
functions this is how you can do a
01:05:44
function
01:05:45
inside a super base you could write a
01:05:47
function that like does a transaction
01:05:49
and then the other thing is if you look
01:05:52
at Edge functions this is a way like you
01:05:56
could write an edge function that uses
01:05:57
the PG Library like I was saying and
01:05:59
they
01:06:01
um this probably
01:06:03
if you're going to do it this way it
01:06:04
would make sense to deploy it to Super
01:06:05
based Edge functions because
01:06:08
then you can integrate it with auth so
01:06:09
whatever Edge function you write will
01:06:12
work on behalf of a user with this soft
01:06:14
thing so yeah
01:06:16
cool well that was easy I didn't even
01:06:18
have to do any work I just played a
01:06:20
video
01:06:22
um
01:06:24
but yeah so that was cut from my recent
01:06:26
YouTube video so basically the the in
01:06:28
the original edit was uh 30 minutes long
01:06:32
and I was like if I want anybody to
01:06:34
watch this
01:06:36
It's gotta be like under 20 minutes
01:06:40
so some of the more specific code
01:06:42
questions I actually cut cut from the
01:06:44
video
01:06:47
um
01:06:49
all right
01:06:53
let's see that's the oldest one on here
01:06:56
find the I swing 55 minutes ago
01:06:59
part two
01:07:00
well I just thought like the thing is
01:07:02
like if it was a part two I don't think
01:07:05
um I don't think you would get as much
01:07:06
views because it's like specific right
01:07:09
so the questions I'm answering in the
01:07:11
YouTube video are like very broad like
01:07:13
it's a wide audience
01:07:15
um
01:07:26
all right
01:07:27
if under the ice Wing asks I was
01:07:30
wondering when and where to use Lambda
01:07:31
functions and how to create my own
01:07:34
um
01:07:37
Lambda functions are basically just a a
01:07:40
uh a different architecture for uh for a
01:07:43
uh a back-end app you submitted an idea
01:07:48
where'd the ideas tab go oh it's down
01:07:50
here
01:07:53
update to the new calendar
01:07:55
nah
01:07:58
this one's fine
01:08:00
um
01:08:01
mainly because it has all the features
01:08:03
right you can click on it you can add it
01:08:05
to your calendar that's a lot
01:08:09
okay uh
01:08:11
the question is uh when and where to use
01:08:13
Lambda functions so basically anywhere
01:08:15
you would have had some kind of request
01:08:17
Handler and back-end code you can
01:08:19
replace that with a Lambda function
01:08:23
um or a serverless function
01:08:26
and also Edge function like serverless
01:08:29
function and Edge function Edge function
01:08:31
is like slightly different because of
01:08:32
the way it's deployed but like
01:08:33
serverless Edge Lambda it's all in the
01:08:36
same group of things
01:08:37
uh and a Lambda isn't an arrow I mean I
01:08:40
guess it can be an arrow function in a
01:08:42
programming language but if we're
01:08:43
talking about
01:08:45
uh AWS Lambda like that's what they call
01:08:47
it AWS Lambda which is basically their
01:08:49
serverless offering
01:08:51
let's let's write all of this out
01:08:52
because I'm I'm saying I'm saying a lot
01:08:54
of things
01:08:55
uh so let's write let's write them out
01:09:00
what's up Alex welcome in
01:09:15
yeah
01:09:16
serverless so first of all we'll Define
01:09:18
serverless because it's not actually
01:09:19
serverless and we'll talk about AWS
01:09:22
Lambda which is a type of serverless
01:09:24
offering
01:09:30
wait way ways to do serverless
01:09:37
um
01:09:38
and then uh okay so
01:09:41
platform as a service I guess we'll
01:09:43
write it out
01:09:48
there's AWS Lambda uh what is the Google
01:09:53
Lambda functions like what what do they
01:09:55
have
01:09:57
not Lambda
01:10:00
uh
01:10:03
because Lambda is different that's
01:10:05
that's like chat GPT stuff serverless
01:10:07
they literally call it serverless
01:10:10
it's literally called Google serverless
01:10:14
um
01:10:16
yeah Azure functions would be another
01:10:18
one
01:10:21
um
01:10:23
uh no this is not platform as a service
01:10:25
this is I mean it kind of is but
01:10:27
infrastructure
01:10:29
as a service
01:10:31
because platform as a service is
01:10:33
slightly different and that would be my
01:10:36
recommendation is like doing any one of
01:10:38
these things manually is a lot
01:10:41
um anything else that should be in this
01:10:43
list of like infrastructure as a service
01:10:46
uh like uh
01:10:48
so Google app engine I feel like is like
01:10:51
slightly different because that's more
01:10:52
like Heroku isn't it we're specifically
01:10:54
talking about serverless offerings
01:10:58
um
01:11:01
because if we're to talk about platform
01:11:03
as a service virtual is probably like at
01:11:05
the top of that list just in terms of
01:11:07
popularity but virtual is just running
01:11:09
on top of AWS Lambda
01:11:11
uh and then also uh Firebase Cloud
01:11:14
functions
01:11:17
are just running on top of Google
01:11:18
serverless
01:11:20
um and then netlify functions
01:11:27
that's netlify
01:11:29
functions
01:11:31
are just running I believe they're just
01:11:33
running on top of AWS Lambda and then
01:11:36
you have
01:11:37
um
01:11:39
uh Firebase no Super Bass
01:11:45
functions
01:11:47
and I'm guessing those are running on
01:11:49
top of AWS
01:11:59
I don't know but um
01:12:03
there's literally a framework called
01:12:05
serverless yeah the serverless framework
01:12:08
um
01:12:10
and in my experience if you're going to
01:12:13
do uh yeah I think cloud for workers
01:12:19
would be in this category but I don't
01:12:21
know where they're hosted
01:12:27
then there's openshift
01:12:35
cool
01:12:37
I haven't heard of this
01:12:39
but that's what I was thinking is is
01:12:40
this just uh is this just running on top
01:12:43
of AWS
01:12:45
um
01:12:47
or is cloudflare just running on top of
01:12:49
AWS all this to say
01:12:51
there's a lot of different places you
01:12:52
could choose to do this but ultimately
01:12:55
when if you build something in a
01:12:58
serverless way you could potentially
01:12:59
deploy to these different
01:13:01
um these different places and these
01:13:04
platform as a service are typically
01:13:06
going to be a lot easier to deploy to
01:13:08
you have less
01:13:09
potentially less control over
01:13:14
where it's running or what the kind of
01:13:15
machine that is running on but a lot of
01:13:18
times you don't want to have you don't
01:13:19
want to care about that stuff whereas
01:13:21
with this you have there's a lot more
01:13:23
fine-grained control but
01:13:24
um
01:13:25
requires a lot more now I have uh helped
01:13:29
someone that was using the serverless
01:13:30
framework before and this basically
01:13:34
gives you a wave of working with AWS
01:13:38
uh Lambda and then there's also
01:13:40
um
01:13:41
what's the what's the thing you put in
01:13:43
front of AWS Lambda
01:13:46
uh
01:13:48
API Gateway
01:13:51
is that the one
01:13:52
I think it is
01:13:54
um
01:13:55
and Marvin thank you for that Prime
01:13:56
because AWS Lambda
01:14:00
uh is it's it's it's fairly convoluted
01:14:02
to like even get set up
01:14:04
and then once you have a bunch of
01:14:05
serverless functions you want all of
01:14:07
those typically to be accessible from
01:14:09
the same domain
01:14:11
and so that's what API Gateway allows
01:14:13
you to do API Gateway lets you put a
01:14:15
bunch of AWS Lambda functions in front
01:14:18
of that API Gateway so now it behaves as
01:14:20
if it was just one API with all of those
01:14:22
endpoints when in reality each one of
01:14:23
those endpoints is actually a separate
01:14:25
Lambda function
01:14:27
um
01:14:29
oh well yeah I don't think I saw it
01:14:31
either says but thank you thank you for
01:14:32
the prime
01:14:34
um
01:14:55
um
01:14:58
cool
01:14:59
so yeah you can look into that but to
01:15:01
answer your question
01:15:03
uh when and where
01:15:05
and then how do you create your own
01:15:07
basically if you're already building
01:15:09
some kind of backend application and
01:15:12
um
01:15:13
you
01:15:15
potentially want to structure it in a
01:15:17
way to where that it will easily scale
01:15:19
in the future
01:15:20
you would use something like uh
01:15:24
serverless
01:15:26
um or or like Lambda functions is the
01:15:29
whole ID here let's let's actually
01:15:30
expand on serverless like serverless
01:15:32
like does not mean
01:15:34
there is no server there is absolutely a
01:15:37
server uh what it means is like
01:15:40
uh it means we don't have to configure
01:15:44
the server ourself
01:15:47
like we don't have to
01:15:49
uh spin up a new VPS or anything like
01:15:53
that all of that is transparent to us
01:15:56
basically all we do is we we give it a
01:15:59
little piece of code to execute and then
01:16:01
the platform manages all of that
01:16:04
um
01:16:05
yeah oh yeah so serverless framework I
01:16:07
guess also helps with Cognito and I
01:16:08
think that's the thing is like
01:16:10
um
01:16:12
AWS has all of these offerings that you
01:16:14
typically need to combine together like
01:16:16
Cognito is their auth offering and an
01:16:18
API Gateway is how you take these Lambda
01:16:20
functions and combine them into a single
01:16:22
API and Cognito you would put on top of
01:16:24
that to make sure that your API has
01:16:26
authorization on top of it serverless
01:16:28
framework helps you with all of that it
01:16:30
helps you integrate all that other stuff
01:16:33
um a lot yeah so it is a lot to take in
01:16:36
but what I what I want to I want to talk
01:16:38
about what it is and then I want to show
01:16:39
you how easy it is if you were using a
01:16:42
platform as a service
01:16:43
um because I'm gonna actually I'm gonna
01:16:44
show you a dino deploy
01:16:47
um so easy so easy like you don't have
01:16:49
to worry about all this stuff okay so
01:16:51
serverless doesn't mean there isn't a
01:16:52
server it means you don't have to
01:16:53
configure the server uh
01:16:56
yeah we don't have to configure the
01:16:57
server ourself
01:16:59
uh we write a single request Handler
01:17:05
so uh you you should know what a request
01:17:09
Handler is to even able to understand
01:17:10
like what serverless is
01:17:13
um so for example if you wrote an
01:17:15
Express API
01:17:17
all of your routes are individual
01:17:19
request handlers right
01:17:20
Lambda functions basically allow you to
01:17:24
or serverless functions basically allow
01:17:25
you to take each one of those individual
01:17:27
request handlers and turn it in to its
01:17:30
own serverless function that can
01:17:32
basically be run on demand and scaled on
01:17:34
on on on demand we so we write a single
01:17:36
request Handler uh this request Handler
01:17:43
is uh scaled
01:17:45
on demand
01:17:47
automatically
01:17:51
as new requests
01:17:54
come in
01:17:56
automatically
01:18:01
so uh
01:18:03
let's let's Show an example and we're
01:18:05
gonna use Dino deploy because
01:18:08
um it's really easy and they have I mean
01:18:11
there's probably
01:18:12
I'll just say this this is what I've
01:18:14
been exposed to
01:18:15
so that's why I think it's easy some of
01:18:17
these others are probably just as easy
01:18:19
but
01:18:20
um
01:18:21
I haven't worked with them so I don't
01:18:23
know how easy they are so give me a
01:18:25
second
01:18:28
I need to
01:18:30
um
01:18:30
log into GitHub
01:18:32
because it's been that long since I
01:18:35
wrote code
01:19:08
I'm not telling America 2050.
01:19:11
um
01:19:16
I mean I guess I could tell you I don't
01:19:18
know that's a potential attack attack
01:19:19
vector
01:19:21
um
01:19:26
it's not supposed to be a secret but if
01:19:28
the if the one that I chose to use has
01:19:31
some kind of leak or vulnerability I
01:19:33
guess it's all local to the phone
01:19:34
anyways I don't know I'm not going to
01:19:36
tell you regardless
01:19:38
um
01:19:56
oh cool all right so I'll show you I'll
01:19:58
show you dino.dev
01:20:00
so uh dino.dev is a way to do Edge
01:20:04
functions
01:20:05
um actually if I log out really quick I
01:20:07
can show you their their sales pitch as
01:20:09
to like what they offer
01:20:17
so
01:20:18
they offer GitHub integration uh they
01:20:21
have 35 different network locations so
01:20:23
this this gets into Edge which is like a
01:20:26
different concept
01:20:28
but if we talk when we talk about the
01:20:29
edge this is
01:20:31
um
01:20:32
serverless functions running as close to
01:20:36
a user as possible
01:20:38
so for instance uh so we talked about
01:20:41
okay we have the single request Handler
01:20:42
that single request Handler can now
01:20:45
scale on demand automatically so you you
01:20:47
give that request Handler to one of
01:20:49
these services and now when when
01:20:51
requests start coming in if all of a
01:20:53
sudden a bunch of requests come in it
01:20:55
can spin up multiple instances
01:20:57
um it can basically scale it infinitely
01:20:59
and then you only pay for for what was
01:21:01
used
01:21:02
now your serverless function might exist
01:21:04
in a very specific region right you
01:21:06
might have a serverless function that
01:21:07
only exists in California or only exists
01:21:10
in Virginia or only exist in Frankfurt
01:21:14
Germany
01:21:15
um and so when a request comes in
01:21:17
there's going to be latency because uh
01:21:19
any user that's on the other side of the
01:21:21
world potentially has to make the
01:21:23
request all the way to that server
01:21:25
Edge
01:21:26
uh takes this a step further and
01:21:29
basically puts your serverless functions
01:21:30
all over the world now so instead of
01:21:32
just being in one data center that same
01:21:34
request Handler that you deployed over
01:21:36
here now gets distributed to all of the
01:21:39
edge servers as well so now your single
01:21:41
edge function lives in California it
01:21:44
lives in Virginia it lives in Dallas
01:21:47
Texas it lives in Frankfurt Germany it
01:21:49
lives all over the world and now when a
01:21:51
request comes in uh the the closest
01:21:54
server or the closest serverless server
01:21:57
to that to the user making the request
01:21:59
serves that request so Edge basically
01:22:02
just takes this a step further and makes
01:22:04
it so that these little functions now
01:22:05
live on the edge or like as close to the
01:22:07
user as possible
01:22:09
um
01:22:10
so that's what they mean when they say
01:22:11
this runs in all 35 Network locations
01:22:13
when you create a serverless function
01:22:14
here it's on the edge and we'll get
01:22:17
served from the closest place
01:22:19
um and then
01:22:22
um yeah yeah exactly exactly like sauce
01:22:25
is saying so AKA this is a CDN so if
01:22:28
you're familiar with the content
01:22:29
delivery Network same thing but for
01:22:31
serverless functions
01:22:34
I'll just say like CDN is
01:22:37
or static files
01:22:39
so a Content delivery network is a way
01:22:41
of of scaling your static file delivery
01:22:43
so that it serves all over the world uh
01:22:47
okay so uh what does it mean to have
01:22:49
like a single single request Handler
01:22:51
Let's uh
01:22:52
let's build a little Dino deploy thing
01:22:54
really quick so on Dino deploy I can
01:22:57
create a new project
01:22:59
um
01:23:00
Let's do let's just do the hello world
01:23:03
let's see what happens
01:23:07
now exactly American 2050 that's why I'm
01:23:09
saying like this isn't exactly a
01:23:10
beginner concept there's a lot of
01:23:12
underlying things here like to even
01:23:13
understand why something like serverless
01:23:15
would be useful you at least have to
01:23:17
understand like HTTP in the request
01:23:20
response cycle and and you also have to
01:23:21
understand like uh client server
01:23:23
architecture
01:23:24
right because like basically what this
01:23:26
is opposed to is it's opposed to a
01:23:29
single server that runs all of our
01:23:31
requests like
01:23:34
I don't know okay so this is our
01:23:36
serverless function and it's it's it's
01:23:38
ready to go so like literally anyone can
01:23:41
go to this website and they can see
01:23:43
Hello World so uh right now in the chat
01:23:46
click that link and then tell me where
01:23:48
you are in the world
01:23:49
um and uh
01:23:52
it uh it actually got got served
01:23:55
um as close as possible to to where you
01:23:57
are in the world like we can uh so
01:24:00
I'm I'm guessing you probably got served
01:24:02
front You Got Served that hello world
01:24:03
from Dallas Texas
01:24:06
um
01:24:08
is in Florida you probably also got
01:24:09
maybe you got like West Virginia we can
01:24:11
look at uh dino
01:24:13
uh deploy
01:24:15
Network locations
01:24:19
California
01:24:20
endpoints and regions
01:24:22
um
01:24:24
oh fascinating so Dino deploy is built
01:24:26
on top of AWS but also Google Cloud
01:24:28
compute
01:24:30
um
01:24:32
so Germany so yeah if you're in
01:24:34
if you're in Germany you probably got
01:24:36
served from Frankfurt if you're in the
01:24:39
US You Got Served for one of these three
01:24:40
locations
01:24:42
um
01:24:45
MTL aren't you in Canada
01:24:48
South Africa Africa served from yeah so
01:24:51
served from Cape Town yeah Belgium
01:24:53
probably is going to Frankfurt
01:24:55
um so yeah they have these regions all
01:24:56
over and actually I have no idea if my
01:24:59
function is running on AWS or if it's
01:25:01
running on Google Cloud compute the
01:25:03
thing is I don't have to know that they
01:25:05
literally give me a spot to put my code
01:25:07
and now it gets deployed all over
01:25:08
whenever that code changes so
01:25:11
um let's change this to hello twitch
01:25:14
save it deploy it
01:25:16
now this is in the process of taking
01:25:18
that code and then pushing it all over
01:25:20
the world so this literally just got
01:25:21
pushed to 35 different network locations
01:25:23
now if you refresh that you should see
01:25:26
Hello twitch
01:25:27
and that got served as fast as possible
01:25:29
from you uh from as close as possible to
01:25:32
you uh and it's and it's pretty instant
01:25:34
right like I didn't have to wait for the
01:25:36
deployment like this thing deployed very
01:25:38
very quickly
01:25:40
um and so the the dino deploy playground
01:25:42
is is pretty interesting because you
01:25:44
it's like
01:25:46
you can kind of see what's happening
01:25:47
here like literally this code that I
01:25:49
write to serve this response is exactly
01:25:51
what you're getting back
01:25:52
um
01:25:54
uh in the real world you typically will
01:25:56
have like multiple serverless functions
01:25:58
and you need some way of like
01:26:00
orchestrating those and like deploying
01:26:02
multiple of your functions
01:26:04
um and so there are Frameworks and stuff
01:26:05
that help with that uh but this this is
01:26:07
as easy as it gets um
01:26:10
if we go back to our
01:26:12
um
01:26:13
our projects
01:26:15
we could look at uh this one rest API
01:26:18
using Oak so Oak is specific to dino but
01:26:21
it kind of like uh emulates
01:26:24
what's this about
01:26:29
why do I need the GitHub app
01:26:31
oh because it needs a whole repository I
01:26:33
see
01:26:35
so a playground is only like one single
01:26:37
file but in Oak app potentially has like
01:26:40
multiple files I'll show you the example
01:26:42
we wrote
01:26:44
for this one
01:26:47
um
01:26:49
we
01:26:51
have an API that returns a list of trees
01:26:56
so you can pass in a query
01:27:00
what's the query
01:27:02
filter so you can pass in a filter
01:27:06
and then you can get all the trees that
01:27:07
have that in them so like you can do
01:27:09
like the letter o
01:27:11
or o a
01:27:14
um this is a serverless function that's
01:27:16
basically just uh responding with
01:27:20
filtered version of that array
01:27:22
here's the thing though we probably
01:27:25
could make a little
01:27:27
um Dino deploy thing here with an
01:27:29
Express API
01:27:32
um because Dino has a way of doing
01:27:36
Express let's just find an example
01:27:49
uh
01:27:56
oppi
01:27:58
heck is opine
01:28:01
I don't like that tutorial
01:28:04
um how to with npm this is what I want
01:28:12
possibly
01:28:16
do you know dot serve the thing is I
01:28:18
think I need some kind of Dino dot serve
01:28:20
with Express
01:28:22
to integrate the two
01:28:45
um
01:28:49
what was the example
01:28:51
um
01:28:57
we did await app dot serve
01:29:02
yeah I don't know if there would be a
01:29:03
way to do that easily with uh
01:29:06
um with Express you could probably
01:29:08
figure it out but I think I've
01:29:10
demonstrated the point enough here
01:29:11
basically this is our little serverless
01:29:13
function that just responds with this
01:29:14
your code can be more complex than this
01:29:16
you could connect to a database you
01:29:18
could run custom logic you could you
01:29:19
could do all kinds of things inside of
01:29:21
this this little request Handler here
01:29:23
um
01:29:24
the other thing to show is like how to
01:29:26
do this with versel
01:29:28
because that's also fairly easy
01:29:31
but versel
01:29:33
um
01:29:34
as far as I know I don't think they have
01:29:37
um
01:29:38
like an a web editor for your code you
01:29:41
typically link it up to a git repo
01:29:44
um but like with Verso
01:29:49
let me see if I can show this really
01:29:51
quick
01:30:03
yes like this so uh the way that they
01:30:06
have you structure it if you're not
01:30:07
using
01:30:09
uh next.js is you have a folder inside
01:30:12
that folder you have a another folder
01:30:14
called API and then any file inside of
01:30:17
that folder becomes a serverless
01:30:19
function and your serverless function
01:30:21
just like like an Express request
01:30:22
Handler takes in the request takes the
01:30:24
response and then does something in this
01:30:27
case it's just responding with with an
01:30:29
object with a bunch of properties on it
01:30:30
but the idea here is you would have
01:30:32
multiple files each one becomes its own
01:30:35
serverless function and then when you
01:30:36
deploy it to versel it deploys each one
01:30:38
of those as a separate serverless
01:30:40
function
01:30:41
and behind the scenes it's it's
01:30:43
deploying it to AWS Lambda
01:30:45
um all right I think I've talked about
01:30:47
this long enough have I answered your
01:30:48
question yeah so how do you create your
01:30:50
own you got multiple options you can do
01:30:52
Dino deploy you can look into how it's
01:30:54
done with versel you can look into these
01:30:57
other things like Firebase netlify
01:31:00
cloudflare workers all these other
01:31:01
things I would honestly recommend like
01:31:03
if you're just getting into this I would
01:31:05
recommend try to use one of these
01:31:07
because if you try to do it directly on
01:31:10
the service
01:31:11
it's going to be a lot harder there's a
01:31:12
lot more configuration that's involved
01:31:14
it's a lot more work than using these
01:31:17
tools which actually make it like very
01:31:18
very simple to do so hopefully that
01:31:21
helps
01:31:22
um I think I guess I didn't really talk
01:31:23
about like why you would do this like
01:31:25
ultimately uh it makes it really easy to
01:31:28
scale
01:31:30
um
01:31:30
in in a world where you have like let's
01:31:33
say you have an Express app that lives
01:31:34
on a server that needs to run node.js
01:31:37
typically the way you would scale that
01:31:39
is you would need to spin up a new
01:31:40
server a brand new server or another
01:31:42
process if you have like multiple CPUs
01:31:44
on that server and then node would be
01:31:46
running multi multiple instances on that
01:31:49
single server and then if that's not
01:31:51
enough you would need to create another
01:31:52
server
01:31:54
and then you would need to have a load
01:31:55
balancer in front of it like
01:31:57
the the older way of of scaling uh
01:32:01
typically would require a lot more work
01:32:02
but the idea here is if you architect
01:32:05
your app
01:32:06
um up front with this in mind like
01:32:08
basically decide that you're going to
01:32:10
use serverless functions you can very
01:32:12
easily scale in the future without
01:32:14
having to really even think about it
01:32:16
that's really the value proposition but
01:32:18
uh there have been a lot of Articles
01:32:20
written and people have shown
01:32:22
like their use cases where like they
01:32:24
decided to go serverless and in the end
01:32:25
it actually ended up costing them more
01:32:27
had they just done like a single VPS
01:32:30
running their app
01:32:32
or whatever else
01:32:34
but yeah
01:32:36
scale equals money yes yeah yeah
01:32:53
so uh hopefully that answered your
01:32:56
question
01:32:57
um I need to use the restroom really
01:32:59
quick so we'll take a quick break uh
01:33:01
while I'm on break I'm gonna play you
01:33:02
another outtake
01:33:04
uh from the video
01:33:06
um if you haven't seen the video click
01:33:08
that link go watch my video on on
01:33:09
YouTube uh but this I'll take uh is a
01:33:12
question I answered from from Ollie so I
01:33:16
will be
01:33:17
right back
01:33:25
this next question comes from Ali Who
01:33:27
Dares me to
01:34:15
this next question comes from Ali Who
01:34:17
Dares me to drink the water
01:34:19
I'm not gonna do that because I don't
01:34:21
want to get sick no uh there are some
01:34:24
definitely rules and things you should
01:34:26
go by if you're gonna decide if you're
01:34:28
going to drink water in the wilderness
01:34:29
well you definitely want to filter it
01:34:31
first
01:34:31
um so also like this is actually a very
01:34:33
large Campground so I mean I'm at the
01:34:35
area where there are no campsites but on
01:34:37
the opposite side there's like almost 60
01:34:39
campsites and I can imagine there's a
01:34:41
lot of things in this water that you
01:34:42
don't want to drink just because there
01:34:43
are so many humans nearby uh but if you
01:34:46
are gonna drink the water you can find
01:34:47
you can get this thing called a
01:34:48
LifeStraw basically it has a carbon
01:34:51
filter inside of it and it'll filter the
01:34:54
water or you can also use like iodine
01:34:56
tablets but I'm not going to do that
01:34:57
because I packed my own water and so
01:34:59
this is clean
01:35:00
bottled water that I transferred to my
01:35:03
own bottle I can trust that it's not
01:35:04
going to have any weird stuff in it and
01:35:06
that's that's what I'm going to drink
01:35:07
while I'm out here in the wild
01:35:10
so this next question comes from Florin
01:35:12
who asks can you get a Dev job with only
01:35:15
knowing vanilla HTML CSS and JavaScript
01:35:18
so I used to work at a code school with
01:35:20
Kyle who I'm camping with
01:35:25
hello
01:35:28
I'm back
01:35:32
I think there's like there's like one
01:35:33
other question that I didn't answer in
01:35:35
the official
01:35:36
oh no this one too from codex
01:35:39
we'll play that one later
01:35:46
cool
01:35:47
welcome back everyone
01:35:49
um
01:35:50
let's answer some more questions uh this
01:35:53
one came from fractal
01:35:55
is there a recommended way to get into
01:35:57
back-end development I'm not new to
01:35:59
coding I just don't know which language
01:36:02
um you've done node.js before
01:36:04
I don't know of a recommended way I
01:36:06
think I think just like uh anything else
01:36:08
in programming you just just try it just
01:36:11
just jump right in
01:36:13
um I think if you are like a front-end
01:36:15
developer it's easier to get into
01:36:16
node.js because it is Javascript and you
01:36:19
might already be familiar with
01:36:19
JavaScript
01:36:22
um
01:36:23
but there's more to learn than just the
01:36:25
the back-end uh
01:36:27
uh framework or library that you're
01:36:31
going to use to like build apis or build
01:36:32
back-end things you have to learn about
01:36:35
databases you potentially learn about
01:36:37
like deployment and scaling and stuff
01:36:39
like that
01:36:40
um so I don't have a recommended way the
01:36:42
way I did it was just to just start just
01:36:45
just try it and try to build my own
01:36:46
stuff and learn as I go similar to how I
01:36:49
learned anything else
01:36:51
um but I would I mean if you're looking
01:36:53
if you let's say you want to get into it
01:36:54
right now I would recommend try and
01:36:56
build an API right so
01:36:58
if you already have an app that's talk
01:37:00
that talks to some API potentially try
01:37:03
to build your own version of that API
01:37:06
and then the app that's talking to that
01:37:09
API can now talk to your app you could
01:37:10
also build like an API proxy
01:37:14
um
01:37:14
but my recommendation is just start just
01:37:17
start try and build things and just
01:37:18
start yeah
01:37:21
okay uh physical ask the question how do
01:37:23
you figure out encoding some custom
01:37:24
solutions that are specific and unable
01:37:27
to find them in stack Overflow or on
01:37:28
forums
01:37:30
um I would like to try to package
01:37:31
together Java
01:37:33
in quick into a war file that I have
01:37:36
with vanilla JS and Java
01:37:40
you mean like quick JS like the new the
01:37:43
new quick thing I don't know if you're
01:37:44
still here physitronic
01:37:46
um
01:37:47
I feel like I have really bad answers
01:37:49
today because my answer to this is just
01:37:51
do it I mean there have been so many
01:37:54
times where I couldn't find the answer
01:37:56
to what I was trying to do
01:37:58
on stack Overflow or anywhere else and I
01:38:01
kind of just had to figure it out and
01:38:02
and like there have been times in my
01:38:04
career where I literally have the same
01:38:07
I I like Googled the same thing over and
01:38:10
over for like multiple weeks just trying
01:38:13
to see if new results would pop up and I
01:38:16
would use tools in in Google search I
01:38:18
mean in these days I use DuckDuckGo but
01:38:20
you can do things like show me only
01:38:22
things that were posted in the past day
01:38:23
or the past week uh just because I was
01:38:26
trying to see if anybody else would talk
01:38:27
about that thing but I think the other
01:38:30
aspect here is to break it break down
01:38:32
what you're trying to do into smaller
01:38:33
solvable problems that you can find on
01:38:35
stack overflow on forms so in this case
01:38:38
you want to try to package together Java
01:38:39
and quick somebody probably hasn't done
01:38:42
it before because quick is new but you
01:38:44
might look into right how do you package
01:38:46
things into a war file that's like a
01:38:48
different problem to solve and then you
01:38:50
can start to go from there to and and
01:38:52
find similar examples like maybe
01:38:54
somebody has packaged next.js in a Wi-Fi
01:38:57
I don't even know if that's a thing you
01:38:59
would want to do
01:39:00
but that would be similar that would be
01:39:02
like that would be closer to what you're
01:39:04
trying to do so maybe if you find an
01:39:05
example of that that could help you
01:39:07
there
01:39:08
um
01:39:10
but yeah that's really my advice is you
01:39:12
just you just gotta do everything you
01:39:14
can to figure it out keep searching the
01:39:16
same things over and over again if you
01:39:18
don't find results and then also break
01:39:19
it down into smaller problems that
01:39:21
actually are more googleable or people
01:39:23
have talked about on stack Overflow
01:39:25
before
01:39:27
cool
01:39:28
all right
01:39:30
um
01:39:35
let's try to answer this one I want to
01:39:37
move from web development to machine
01:39:38
learning and data science I don't know
01:39:40
python what are my other options uh is
01:39:43
so I'm I'm not in uh machine learning or
01:39:47
data science I've done
01:39:49
um
01:39:51
uh things that are tangential to it like
01:39:53
I've done like a lot of data
01:39:54
visualization and I've done things of
01:39:56
like cleaning data and stuff like that
01:39:57
but I've never officially been a data
01:39:59
scientist or like done things with
01:40:01
machine learning uh but I know python is
01:40:03
everywhere so like I mean it's possible
01:40:06
to do machine learning and data science
01:40:07
without python like there's actually uh
01:40:09
tensorflow Js
01:40:12
uh and sej thank you for the prime there
01:40:13
it is thank you six months of CJ wait is
01:40:16
that a six month reason
01:40:19
that's a that's a lot of that's a lot of
01:40:21
research thank you for the six months
01:40:23
uh but yeah tensorflow.js would allow
01:40:26
you to do machine learning with
01:40:27
JavaScript if that's something you want
01:40:28
to do and I'm sure you could find
01:40:30
similar libraries for any other
01:40:31
programming language but python is where
01:40:34
it's at like all of the libraries are in
01:40:36
Python
01:40:37
um you typically also want to do a lot
01:40:38
of like data manipulation and data
01:40:40
visualization there's a lot of really
01:40:42
good libraries in Python that do all of
01:40:44
that of course you could find things in
01:40:46
other programming languages but in
01:40:48
machine learning and data science it's
01:40:50
really hard to avoid python
01:40:52
so I my suggestion is Learn Python and
01:40:56
and uh learn the libraries associated
01:40:58
with ML and data science uh if you don't
01:41:01
want to tensorflow.js is a way to do
01:41:03
machine learning like with node.js
01:41:06
um
01:41:07
there's also
01:41:09
ml5.js so this is written on top of
01:41:11
tensorflow and like this lets you do
01:41:14
machine learning in the web browser
01:41:18
um
01:41:19
so it has a bunch of like
01:41:21
ready to go uh images and models that
01:41:25
you can pull from to do like ml in the
01:41:27
browser so yeah I haven't heard of
01:41:28
ml.net but I'm guessing that's a way of
01:41:30
doing machine learning
01:41:33
um well I don't want to go to that
01:41:34
website
01:41:38
uh yeah machine learning made for net
01:41:41
who
01:41:44
um
01:41:47
but uh yeah I don't know what it's built
01:41:49
on top of or what it actually uses
01:41:53
um but yeah what what is ml.net
01:41:57
oh it's created by Microsoft that's cool
01:42:02
but it's a potential another option I
01:42:04
think like in the.net World there are a
01:42:06
lot of options for data visualization
01:42:07
and stuff like that but
01:42:10
um
01:42:11
uh
01:42:14
but yeah if you if you're familiar with
01:42:15
C sharp this might be something you lean
01:42:17
towards if you don't want to learn
01:42:18
python as well yeah
01:42:21
um SC May says do I have a beginner
01:42:23
course for programming like libraries
01:42:25
and such I don't I need to
01:42:28
I need to I just haven't spent the time
01:42:29
creating one but I I need to
01:42:32
I mean that's what a lot of Microsoft
01:42:34
stuff is is
01:42:36
why they do it
01:42:38
but yeah I am Xavier hopefully that
01:42:40
helped uh let's see what else
01:42:43
um
01:42:46
yeah let's answer this one wait
01:42:48
um
01:42:51
answer this one and then we'll also
01:42:52
answer stas's question and then we'll go
01:42:55
from there
01:42:56
um
01:42:57
winter not found says do you have any
01:42:59
videos discussing getting a job in web
01:43:01
development I'm being let go support
01:43:03
engineer and I'm looking to switch paths
01:43:07
um
01:43:08
I guess what you're really asking about
01:43:09
is like career advice
01:43:11
or are you also learning asking just
01:43:13
like how do you learn web development
01:43:14
because I do have some YouTube videos
01:43:16
that kind of help with that
01:43:19
so if you check out this playlist over
01:43:20
on YouTube
01:43:21
uh the first video talks about why I
01:43:24
think web development
01:43:25
um is potentially one of the most
01:43:27
lucrative things or and and like most
01:43:30
widespread things in terms of
01:43:31
programming because there's a lot of
01:43:32
different kinds of programming you could
01:43:33
do and then the second video talks about
01:43:35
places where you can learn to code
01:43:37
online for free
01:43:39
um so that that might help I don't
01:43:42
really have
01:43:44
anything specific on
01:43:48
um like career advice
01:43:51
um
01:43:52
anything I do have is like probably lost
01:43:55
in like a two or three hour code q a
01:43:57
stream where I was giving some kind of
01:43:58
like very specific
01:44:01
um career advice
01:44:02
but
01:44:04
hopefully hopefully that will help you
01:44:05
if you check out that playlist
01:44:07
um it has at least ways to learn web
01:44:09
development
01:44:10
because learning web development is
01:44:12
always is different than getting a job
01:44:14
in web development because first you
01:44:15
have to learn it build things with it
01:44:18
understand it well and then
01:44:21
try to find a job which is a completely
01:44:23
it's like a whole other set of skills
01:44:25
like you need to have a good resume you
01:44:27
need to have a good portfolio you need
01:44:29
to practice interviewing you need to
01:44:31
potentially practice whiteboarding
01:44:32
interviews and programming interviews so
01:44:34
like it's a it's a long process the
01:44:36
first step is to learn and build though
01:44:40
okay stock says why is you State uh why
01:44:43
does the u-state hook not have a
01:44:45
callback to track when set State
01:44:47
function ends it's hard to implement
01:44:49
under the hood or is it missing
01:44:52
um
01:44:56
wait
01:45:00
wait what do you what what I don't know
01:45:02
if you're still here stoss but do you
01:45:04
have an example of this like do you have
01:45:06
a uh
01:45:07
a specific thing that you're trying to
01:45:09
do
01:45:10
uh
01:45:12
because we could spin up a little react
01:45:14
only we have a react app we could put
01:45:15
this in a reactor really quick
01:45:18
um so you've built some stuff currently
01:45:19
teaching yourself more about building
01:45:21
typesafe apis used with next awesome
01:45:23
you're way more advanced than than I
01:45:24
thought so my videos probably won't even
01:45:26
help you
01:45:27
um I think the only advice I can give
01:45:28
right now is uh try to build out a
01:45:31
portfolio so I'm guessing you you don't
01:45:34
have a degree in computer science
01:45:36
because you but you probably have to
01:45:37
have an I.T degree like if you're
01:45:39
working elsewhere in the IT industry
01:45:41
um but if you want to get hired as a
01:45:43
programmer or as a web developer you
01:45:45
need to be able to show them that you
01:45:47
um
01:45:48
can do it so uh I would say start
01:45:51
working potentially on a project
01:45:53
portfolio
01:45:55
um
01:45:56
and you you need something to show
01:45:59
potential employers that you you know
01:46:01
what you're doing and basically like
01:46:03
take the projects you've built and like
01:46:04
make them put them into something that's
01:46:07
easily showable to to places you're
01:46:09
going to be applying to
01:46:11
um and then from there you can start
01:46:12
practicing interviews there are places
01:46:14
online where you can do like mock
01:46:15
interviews there are Discord communities
01:46:17
where you can get mock interviewed by
01:46:19
people
01:46:20
because that's thing that's one thing
01:46:21
you're going to want to practice as well
01:46:25
anything you should avoid putting in
01:46:26
your portfolio I think you should put
01:46:28
anything in there that demonstrates your
01:46:31
skill set and also your expertise so
01:46:34
like yeah I would avoid putting to do
01:46:36
apps in there if you can
01:46:38
um like if you have other things because
01:46:40
to-do apps typically are for they're for
01:46:42
yourself right a to-do app was you
01:46:44
learning
01:46:45
how to do the thing but what you should
01:46:47
typically do is like take those things
01:46:49
you learned in that to-do app and then
01:46:51
build your own app that incorporates
01:46:52
those ideas and that's something I would
01:46:54
put in the portfolio because that shows
01:46:56
that you're not you know how to build
01:46:59
things for yourself you're not just
01:47:00
following a tutorial
01:47:03
um
01:47:04
but
01:47:05
uh yeah and I think that's some some
01:47:08
other advice there is just like try not
01:47:10
to build generic things like
01:47:13
you could have followed a tutorial on
01:47:15
how to build a to-do app
01:47:17
but if you modify it slightly so instead
01:47:19
of a to-do app which like is marking
01:47:22
things that you need to do as done
01:47:25
um or like removing them from the list
01:47:26
you could have an app that's like movies
01:47:29
you want to watch which is slightly
01:47:31
different than a to-do app but now it's
01:47:33
like a list of to-do's that are movies
01:47:35
you want to watch which is slightly
01:47:36
different
01:47:38
and a bit more original
01:47:40
yeah so like Cinema management like
01:47:42
movie management like e-commerce stores
01:47:44
are like can be a bit more complex and a
01:47:47
lot of times
01:47:49
like you don't want to build e-commerce
01:47:51
from scratch you typically integrate
01:47:52
with like existing things but yeah
01:47:56
yeah I think uh showing that you know
01:47:58
how to integrate oauth is a good thing
01:48:00
to have in your portfolio and maybe you
01:48:02
highlight that right so like in your
01:48:03
portfolio
01:48:05
you say this app I built specifically
01:48:08
uses oauth and this is the code I use to
01:48:10
implement it and that kind of thing
01:48:13
but yeah okay so stas I think they
01:48:15
mentioned they'll give an example later
01:48:16
okay
01:48:17
um
01:48:19
thank you thank you
01:48:26
so says just asking why is HTML good
01:48:29
JavaScript is good but CSS is an
01:48:32
unintelligible mess
01:48:35
I don't know I would think I would I
01:48:37
would say they're all kind of a mess
01:48:38
honestly HTML is like the only like
01:48:40
structured thing on and predictable
01:48:42
thing out of all of these
01:48:47
but uh
01:48:50
like and also I guess it depends like
01:48:52
these days there are like some very
01:48:54
specific CSS that you can use to get the
01:48:56
thing that to do the things that you
01:48:58
want it to do right like most of the
01:49:00
time we are building custom layouts
01:49:05
for our websites and these days if you
01:49:07
just use flexbox or grid
01:49:10
it's mode it's pretty it pretty much
01:49:12
does what you expect it to do
01:49:15
um the unpredictable things I guess are
01:49:18
like the Box model or whatever like like
01:49:20
really understanding
01:49:23
border versus width uh uh and like how
01:49:27
that accounts into like
01:49:29
what gets displayed on the page
01:49:32
those can be the tricky parts
01:49:34
I don't know my my answer is
01:49:36
uh stick to flexbox and create and you
01:49:39
can do most things
01:49:40
yeah and you're welcome sash
01:49:42
the thing is even with Tailwind though
01:49:44
you still have to understand the basics
01:49:45
of CSS
01:49:47
um and even with Tailwind you would end
01:49:49
up using
01:49:50
uh like I would hope like flexbox or css
01:49:54
Grid or whatever else
01:49:57
yeah
01:49:59
HTML is only predictable when browsers
01:50:01
implemented all the same way but they
01:50:02
should these days these days they should
01:50:04
right
01:50:06
um
01:50:08
yeah uh Bruno Kazooie or Bono Kazooie is
01:50:11
saying when was the last time you had to
01:50:12
rewrite for performance what was the
01:50:14
scenario uh I didn't and I never have
01:50:17
and I've been programming professionally
01:50:19
for over
01:50:21
um 12 years and in general I've been
01:50:24
programming for over 15 years and never
01:50:28
in my life have I had to rewrite
01:50:30
something for performance
01:50:32
which is why I typically don't care
01:50:33
about when people talk about performance
01:50:35
and I don't do performance comparisons
01:50:37
because they're like I'm not saying that
01:50:39
it's not important but there are very
01:50:40
specific jobs and scenarios and use
01:50:43
cases where you do need to care about
01:50:45
performance and I've never had to do any
01:50:46
of that and I have had a successful
01:50:48
career I guess
01:50:52
it's all it's successful
01:50:54
um so yeah I've never had to rewrite
01:50:55
something for performance
01:50:58
honestly that's a lie though I like
01:50:59
little things but not enough to care
01:51:03
um and the re and I think also why I'm
01:51:05
giving an answer like this is because
01:51:06
I'm I'm tired of hearing about it right
01:51:09
so and I think that's the thing right
01:51:10
like oh you see these anytime a YouTube
01:51:12
video mentions performance and it's
01:51:16
about programming
01:51:17
instant 10x on the views right
01:51:21
I don't know and thank you programmer
01:51:23
Jeff I like my shirt
01:51:25
uh let's do a quick plug for the for the
01:51:28
merch
01:51:29
merch.coding.garden you too you too can
01:51:32
get yourself
01:51:33
a shirt with the word code on it
01:51:36
there it's all the way at the bottom
01:51:39
um
01:51:42
it's interesting to watch but you don't
01:51:43
care to do in your code yeah yeah
01:51:46
have you heard about bun
01:51:48
I have and I bet they're doing good
01:51:50
things but I think that that's the thing
01:51:52
that kind of like irked me early on
01:51:53
about about bun is like everyone was
01:51:55
like freaking out about the performance
01:51:56
when most people actually didn't care
01:51:58
I'm not saying no one cared I'm saying
01:52:01
most people wouldn't actually have to
01:52:03
care about the performance like
01:52:05
I I think isn't it something like
01:52:06
cloudflare workers or using bun they
01:52:10
um they care about the performance
01:52:12
because they're they need to scale and
01:52:14
they're like hosting people and stuff
01:52:15
like that and they want their functions
01:52:17
to run fast but anyone else bro probably
01:52:20
don't care as much
01:52:22
yeah last time I had to do it was a
01:52:24
large list of things in angular yeah I
01:52:26
think honestly if I'm trying to think
01:52:27
about like where in my career did I
01:52:29
actually need to do it
01:52:31
I think ultimately it was like I didn't
01:52:33
have to performance tune I just wrote it
01:52:36
one way and then realized oh I've got a
01:52:38
million rows in this table I can't just
01:52:40
render them all at the same time so I'm
01:52:42
going to add a library that does list
01:52:43
virtualization and that was the solution
01:52:45
I didn't have to do it myself I just
01:52:46
like added a library
01:52:49
um
01:52:49
and then one time I was implementing an
01:52:52
animation this was like for a personal
01:52:53
product I was implementing an animation
01:52:56
of uh characters like the characters
01:52:59
would like flip and then land on a
01:53:00
specific character
01:53:02
and I tried to do it in vue.js it was
01:53:04
like really slow because it uses the
01:53:06
virtual Dom so I was like uh let's try
01:53:08
this new svelte thing and I just
01:53:10
implemented it with felt and it
01:53:11
instantly worked so like in my
01:53:12
experience it's not having to like
01:53:15
narrow in and find fine tune it's like
01:53:18
just rewrite it with something else or
01:53:19
use a different library and it just
01:53:20
works better I don't know
01:53:24
there's weird stuff when you want to
01:53:25
customize input elements oh yeah you're
01:53:27
talking about HTML cross cross browser
01:53:31
I guess this is true and I think that's
01:53:32
the thing that I I potentially don't
01:53:35
think about a lot is that because I have
01:53:37
a background in computer science and I
01:53:40
did think about and I did learn about
01:53:43
uh data structures and algorithms and
01:53:46
like Big O and and
01:53:48
um
01:53:49
uh that those kinds of things I feel
01:53:52
like those are potentially always at the
01:53:53
back of my head when I'm implementing
01:53:55
Solutions I think I think that's the
01:53:56
other thing is like
01:53:58
when I'm implementing a front-end app
01:54:00
I almost never use array.find
01:54:05
um
01:54:06
or
01:54:08
um
01:54:09
I guess yeah yeah so almost never use
01:54:11
array DOT fine because in a lot of
01:54:13
scenarios it makes more sense to put
01:54:15
something into a map or like a like a
01:54:17
like a hash or a dictionary for like
01:54:20
constant lookups versus having to search
01:54:21
through an array every time
01:54:23
and I'm not talking about like in what's
01:54:25
up Taco Bandit like I'm not talking
01:54:27
about map being faster than
01:54:29
any other method basically like don't
01:54:31
use in a like a linear search method
01:54:34
when a a hash lookup would be faster
01:54:38
and so I think like that's that's the
01:54:40
other thing is like a lot of times I
01:54:41
just default to that so I don't have to
01:54:42
worry about it later on
01:54:45
yeah
01:54:47
oh man sorry to hear that GPT
01:54:51
and many times a quadratic solution is
01:54:54
good enough yeah so Taco Bandit says I
01:54:56
had to do some Performance Tuning but it
01:54:58
was the queries to so you were
01:54:59
using a lot of lookups that are slow so
01:55:01
we need to move away from that yeah I
01:55:03
yeah and the thing is like I said I
01:55:05
never have done I've probably if I dig
01:55:07
deep enough I could I could dig I could
01:55:10
think of some things I've done but
01:55:14
yeah
01:55:16
um
01:55:23
yeah use exclamation mark ask Audi so I
01:55:26
don't I don't lose your question but
01:55:27
it'll show up on this site if you use
01:55:29
explanation mark asked
01:55:32
thanks for the hydrate
01:55:42
it's not a thing until it's a thing
01:55:45
I agree with that
01:55:47
uh have I seen the new stuff in spelled
01:55:50
for I haven't
01:55:53
um we'll probably upgrade that's my
01:55:54
answer for that
01:56:03
all right
01:56:04
this question comes from finder
01:56:07
um how do you prepare for a talk about
01:56:09
something you made I'm asking is that I
01:56:11
have to prepare for a talk about a
01:56:13
program I made that looks for files in
01:56:14
an encrypted hard drive
01:56:16
hey Taco Bell
01:56:18
open you're very kind
01:56:19
thank you for the gifts
01:56:22
um
01:56:25
no this is just an invisible cup that's
01:56:28
all that is
01:56:34
I think Taco base uh how do I prefer for
01:56:37
a talk on something I think and so I
01:56:39
think that
01:56:40
um initially when you asked the question
01:56:41
I thought you meant like a meet-up talk
01:56:43
or like a conference talk but I think
01:56:44
you're just gonna be presenting
01:56:46
to like your co-workers right
01:56:49
um or maybe to like management
01:56:51
or to like a class like to other
01:56:53
students
01:56:56
um
01:57:00
so yeah let me just let me just give you
01:57:02
some tips on
01:57:04
um like like presenting uh first of all
01:57:07
live demos almost always go wrong so if
01:57:11
you want to show the thing working
01:57:13
uh take screenshots and potentially do a
01:57:15
screen recording so that way during your
01:57:17
presentation
01:57:19
um maybe during your presentation you're
01:57:20
like all right I'm gonna try to do a
01:57:22
live demo but if the live demo doesn't
01:57:23
work have your screenshots and screen
01:57:25
recording as a backup
01:57:27
ready to go uh because it almost always
01:57:30
happens that like things just don't work
01:57:31
out the demo doesn't work so if you have
01:57:33
that video you can play you can people
01:57:36
can still see what you were trying to
01:57:38
trying to demonstrate
01:57:40
um
01:57:41
I think up front you probably want to
01:57:43
make like a bulleted list of like uh the
01:57:46
these are the the problems I had to
01:57:49
solve I guess you could almost treat it
01:57:50
like a like an an answer to an interview
01:57:53
question so if you've heard of the the
01:57:55
star method situation task action
01:57:58
result or situation task action
01:58:04
what's the r stand for
01:58:06
but
01:58:07
that basically kind of gives you a story
01:58:09
arc for talking about your project so
01:58:11
like what was the situation you were
01:58:13
presented with I needed to to write a
01:58:16
program that's that encrypts specific
01:58:18
files on the on the system because of
01:58:21
Asana thank you for the five it's very
01:58:23
kind
01:58:25
um it says thanks for uh thanks for
01:58:27
watching your videos and streams I got
01:58:28
into web development in October I
01:58:30
stopped my my first software job nice
01:58:32
without a CS degree that's awesome
01:58:34
thanks for the great content keep up the
01:58:35
word thank you Sana I appreciate that
01:58:38
but yeah what's the situation what was
01:58:40
the task right this is exactly what I
01:58:42
did uh the action this is how I did it
01:58:45
and then the result is we now have a
01:58:47
program that can encrypt files on the
01:58:49
hard drive so basically you you you can
01:58:52
find various methods for like telling a
01:58:54
good story about the thing that you did
01:58:56
so hopefully that helps find her
01:58:59
and also the tip about having backups
01:59:01
like for screen recordings or video
01:59:03
recording hopefully that helps too
01:59:06
all right uh this one from harsh says uh
01:59:09
sometimes uh okay yeah so it says the
01:59:11
situation task action result sometimes
01:59:13
referred to as Sora situation objective
01:59:16
action result aftermath yeah something
01:59:19
like that
01:59:20
but that should honestly
01:59:22
um the thing about good presentations
01:59:24
and like good talks typically one of the
01:59:28
good things you can have various kinds
01:59:29
of presentations and talks but one of
01:59:31
the things that typically always goes
01:59:33
over fairly well with a crowd
01:59:35
it is it is if you have a story right so
01:59:38
like the reason we watch movies and we
01:59:40
watch TV shows and even these days like
01:59:41
YouTube videos is because they're
01:59:43
entertaining and they keep us engaged
01:59:45
typically with some kind of story arc
01:59:47
right like you you have the the
01:59:49
situation that you're presented with you
01:59:51
kind of like see the journey and then
01:59:52
you see some kind of resolution
01:59:55
um at the end of it all
01:59:57
um and so people like watching things
01:59:59
like that so if you're giving a talk or
02:00:01
even like a presentation for work that
02:00:03
that can help you as well
02:00:06
um all right harsh says sometimes I feel
02:00:08
that I've wasted a lot of time in the
02:00:09
past and I feel regret and not able to
02:00:11
concentrate on today what should I do
02:00:15
um
02:00:17
first of all just remind yourself that
02:00:19
you can't change the past so like
02:00:21
most people have regrets right most
02:00:23
people have things that they wanted to
02:00:26
do but didn't do or did do and they feel
02:00:28
like they shouldn't have done
02:00:30
but
02:00:31
um
02:00:32
at least right now we don't have the
02:00:33
technology to go back and change the
02:00:35
past or at least it's not accessible to
02:00:37
people like us maybe large governments
02:00:40
have
02:00:41
uh time travel technology they use to
02:00:46
think but we don't have that right so we
02:00:48
we uh we we're living time moves forward
02:00:51
you can't change the past you can learn
02:00:53
from the past though I think I think
02:00:54
that's one of the main things is you
02:00:56
basically try to take those feelings of
02:00:58
regret
02:00:59
and turning it turn them into something
02:01:01
actionable right because those those
02:01:03
regrets you have are potential learnings
02:01:06
right their potential they're things you
02:01:08
did that you feel were wrong or you feel
02:01:10
like you shouldn't have done but now you
02:01:13
can treat that like a learning you can
02:01:14
say like going forward I'm not going to
02:01:16
do that because I learned the hard way
02:01:18
right I learned that if I do this
02:01:20
specific thing something bad's gonna
02:01:22
happen or if I don't do something
02:01:23
like yeah you just have to move on from
02:01:25
that um and so yeah my advice is
02:01:29
uh focus on what you can do now to
02:01:33
change things going forward versus
02:01:35
feeling regret
02:01:37
about the past that's that's the advice
02:01:39
that I can give and noctate says I
02:01:41
should have talked to that girl in
02:01:42
eighth grade I mean that's something
02:01:44
that's like
02:01:45
um the um
02:01:47
the uh
02:01:49
that's that's something that's hard to
02:01:51
think about oh I should have done it or
02:01:52
I couldn't have done like the thing for
02:01:55
for I think you can always take
02:01:56
something and spin it though right like
02:01:58
the thing that I think about is like oh
02:01:59
I should have talked to that girl in
02:02:00
eighth grade where is that that where is
02:02:02
that that person now right like they
02:02:04
probably have a life of Their Own
02:02:07
and like I guess the regret you could
02:02:08
have is like oh well they could have had
02:02:10
a life with me well do you really want
02:02:12
that I mean I I don't know
02:02:14
I don't know live in the present
02:02:16
learn from your mistakes
02:02:19
um
02:02:20
and yeah that's all that's all the
02:02:22
advice I can get thank you thank you
02:02:23
harsh thanks for the question and like
02:02:25
like Sage says we love you no regrets
02:02:27
keep moving do your best
02:02:30
yeah what's my favorite web framework
02:02:32
right now
02:02:34
I guess felt
02:02:36
always just assume they're in prison I
02:02:39
think if yeah so I think that's if you
02:02:40
have regrets about things you don't know
02:02:41
the details over just make the details
02:02:44
up to make it way worse than it actually
02:02:46
uh actually is so like if you have a
02:02:49
regret that you didn't ask that person
02:02:51
out in eighth grade
02:02:52
now you just be like yeah well they're
02:02:54
actually in prison and so it's a good
02:02:56
thing that you didn't ask them out uh uh
02:02:59
I am Salim says thanks for the question
02:03:00
he's not alone yeah
02:03:02
yeah just just make up a backstory and
02:03:05
they don't have to feel bad about it
02:03:07
um all right uh I I like svelte
02:03:11
spelled is nice
02:03:12
and I
02:03:15
want to learn more about feathers
02:03:17
version five the latest feathers
02:03:22
also platformatic
02:03:24
seems cool
02:03:26
um
02:03:28
I kind of want to dig into this
02:03:32
but I haven't used it it just seems cool
02:03:35
if I had to pick pick a favorite I guess
02:03:37
I'd go with svelt just because I use
02:03:38
that use it the most
02:03:50
platform addict no platformatic that
02:03:54
formatic uh Mateo colino is the creator
02:03:57
he he he came on the Stream
02:03:59
uh a couple months back to talk about it
02:04:02
and then they launched it at JS Nation
02:04:07
it seems cool
02:04:10
any thoughts about react Roots 2.0 I
02:04:12
haven't thought about it at all um
02:04:15
so if you're not familiar react Roots is
02:04:17
a course I did on react and typescript
02:04:22
um
02:04:24
I think the the main issue was I I set
02:04:27
aside a lot of time to run the course
02:04:29
live and then the participants in the
02:04:31
course didn't really need my help
02:04:33
outside of
02:04:35
giving reviews for their exercises
02:04:38
um
02:04:41
so there was like a lot of time I set
02:04:43
aside for doing the live course that was
02:04:46
just me sitting around doing nothing
02:04:48
like if I did it again I want to make
02:04:49
sure that I am using my time wisely
02:04:53
um
02:04:56
but there's there's
02:04:58
a potential course on both sides of this
02:05:00
right like there I I
02:05:03
could probably do a course on things you
02:05:07
need to know before you even learn
02:05:08
reactant typescript like this stuff
02:05:13
um and then I could also do a course of
02:05:14
what do you learn after you know the
02:05:16
basics of reactant typescript like how
02:05:18
do you advance from there
02:05:20
um but I haven't thought about it
02:05:20
because it's a lot of work
02:05:22
I don't know I want to make all my money
02:05:24
streaming just gift Subs donate and I
02:05:27
could just do this for the rest of my
02:05:28
life
02:05:30
yeah exactly default it's like it's
02:05:31
something that I can't predict which is
02:05:33
hard because it's like I set aside like
02:05:35
a certain number of hours in the day
02:05:37
where i'm like all right I'm gonna be
02:05:38
available for everyone
02:05:40
which means like I don't wanna
02:05:42
plan on doing anything else because I
02:05:44
want to be available to answer questions
02:05:47
but if I do that and then they don't
02:05:48
have questions now I'm just sitting
02:05:50
there doing nothing and like I'm not
02:05:51
optimizing my time
02:05:53
I don't know
02:05:56
all right uh
02:05:58
what else
02:06:04
uh I know you're not angular Maine but
02:06:06
what do you think about this
02:06:11
built-in control flow
02:06:15
a control flow Syntax for angular
02:06:26
whoa did they steal the syntax from
02:06:29
svelt and mustache
02:06:42
wow
02:06:44
I think it's fine I think it's fine so
02:06:47
um
02:06:47
some people might hate the syntax and
02:06:49
like prefer like ngif or whatever is
02:06:51
built into angular right now but I think
02:06:53
one of the cool things about templates
02:06:55
and vedith thank you for the the resub
02:06:57
the cool thing is about syntax like this
02:07:00
is that the compiler can actually
02:07:02
optimize the template whereas it's
02:07:04
harder for a compiler to optimize like
02:07:06
directives on an element
02:07:09
so it seems fine
02:07:10
seems fine
02:07:13
I think ultimately I've I've come around
02:07:15
to the uh to this felt syntax I think
02:07:18
it's I think it's cool and the idea that
02:07:20
the the template can be optimized more
02:07:22
easily now
02:07:24
um is pretty interesting too
02:07:28
pretty soon we're going to see that
02:07:30
syntax and react that would be pretty
02:07:32
funny if we did
02:07:34
um
02:07:37
all right let's just
02:07:39
seems interesting let's see let's see
02:07:42
what this question is can you help me
02:07:44
settle an argue can you help settle an
02:07:45
argument between me and my girlfriend
02:07:48
she believes hiring a mid-level C plus
02:07:50
plus Dev that doesn't have the four
02:07:52
years of experience in C plus is going
02:07:55
to produce junior level code I argue
02:07:57
that a mid-level developer can pick up
02:07:59
the language fairly quickly
02:08:01
and produce quality code to that of a
02:08:03
mid-level what do you think
02:08:10
hiring a mid-level C plus plus Dev that
02:08:13
doesn't have four plus years of
02:08:15
experience in C plus
02:08:22
oh yeah um
02:08:24
here's the thing uh
02:08:29
when I was in a position to hire people
02:08:33
I care about
02:08:35
like the qualities of a teammate first
02:08:39
before I start to care about like their
02:08:41
level of uh
02:08:43
like what what they can code
02:08:46
because here's the thing like it it
02:08:47
depends on the person for this right so
02:08:49
like personally
02:08:51
I think I could get up to speed it like
02:08:55
it wouldn't be instant right it would
02:08:56
take me some time to get up to speed but
02:08:58
I'm the kind of employee I'm the kind of
02:09:01
teammate I'm the kind of person that
02:09:02
does everything I can to do to produce
02:09:05
the best possible work which means I'm
02:09:08
going to be very like aware of the fact
02:09:11
that I'm not at the same level as the
02:09:13
people around me and I need to level up
02:09:15
and uh I need to use their code
02:09:19
um their existing code as an example
02:09:20
when I'm writing my own code and I need
02:09:22
to make sure that I follow all the the
02:09:25
guidelines uh before going into a code
02:09:27
review and different stuff like that so
02:09:29
like
02:09:29
there's a certain kind of developer that
02:09:32
I think could do this
02:09:33
there's also a certain kind of developer
02:09:35
that I don't I think would have a very
02:09:36
hard time and would potentially produce
02:09:39
junior level code
02:09:41
um so I think it depends I think it
02:09:42
depends on the person and ultimately you
02:09:45
should you should hire someone that you
02:09:47
would enjoy working with
02:09:48
kind of regardless of their skill set
02:09:50
now obviously skill set is important but
02:09:52
I think that comes second and if you
02:09:54
find someone that you think is going to
02:09:56
be reliable you think they're going to
02:09:58
be a good teammate they get along well
02:09:59
with everyone
02:10:01
then it might actually be worth
02:10:03
uh slowing the team down for a little
02:10:05
bit while they get caught up uh that's
02:10:08
you know yeah I'm not I'm not here to
02:10:09
settle that argument I'm here to say
02:10:11
there's way more to it than just do we
02:10:14
think they're going to be able to
02:10:15
produce production now I don't think
02:10:17
they're going to produce junior level
02:10:18
code I think
02:10:21
it's going to it but it absolutely will
02:10:24
take some time for them to get up to
02:10:26
speed
02:10:27
um because yeah like even personally
02:10:29
like if I were to go to a project doing
02:10:31
C plus like I would
02:10:33
um
02:10:35
I I I'm aware of my own deficiencies
02:10:38
like I know there's so much that I like
02:10:41
I know how to program but I don't know
02:10:43
like what are the like the the best
02:10:45
practices what are the the the things
02:10:47
that that we need to do
02:10:50
in like a modern simple source code base
02:10:51
like those are the kinds of things that
02:10:53
you have to learn
02:10:54
so
02:10:56
yeah
02:10:59
yeah
02:11:00
so I don't know it also depends on their
02:11:01
past experience too like uh if what were
02:11:04
those four years of experience doing
02:11:06
right was it in low level code was it in
02:11:09
some something completely different
02:11:11
so yeah I'm not here to settle your
02:11:14
argument I'm here to tell you
02:11:17
um there are other things you need to
02:11:19
think about as well
02:11:21
yeah limo says the best best practices
02:11:23
in C plus are not to use modern civil
02:11:26
soils yeah the answer is to use rust
02:11:28
right don't you see post plus I don't
02:11:31
know
02:11:34
uh should we make a new JavaScript
02:11:36
framework called thick to compete with
02:11:38
spell
02:11:39
I don't want to compete with felt I
02:11:42
felt as cool so this felt has like
02:11:44
solved a lot of the things so why would
02:11:46
we want to compete with it but I see
02:11:48
what you're saying it's a joke right
02:11:49
it's a joke I don't know
02:11:52
nice
02:11:53
hey what did what oh you said you were
02:11:56
gonna get five guys didn't you such but
02:11:57
now you're gonna get Dominoes
02:12:02
um
02:12:03
all right do do exclamation mark ask uh
02:12:07
Rich
02:12:08
um so that it shows up on this side just
02:12:09
so I don't lose your question because
02:12:10
I'm answering some of these other ones
02:12:12
first
02:12:15
um all right
02:12:17
can I look at this yeah this guy asked
02:12:19
some while I don't know if they're still
02:12:19
here xenogenesis
02:12:31
need help with error module not found no
02:12:33
module named application when deploying
02:12:35
to AWS static elastic Beanstalk
02:12:42
so looks like this is python code
02:12:47
um
02:12:52
and
02:12:56
you define the application here
02:13:06
where's the actual error message
02:13:14
no module named application
02:13:18
I think this is it would be this line of
02:13:20
code here this is the one that's
02:13:21
breaking I think
02:13:25
but I have no idea I don't do a lot of
02:13:27
python
02:13:29
but but I would imagine it's either this
02:13:32
line of code or this line of code
02:13:36
um or somewhere in here
02:13:39
or here your your problem is in this
02:13:41
general area
02:13:43
I I I can't I can't help you um
02:13:47
so yeah
02:13:51
well Express take me far enough without
02:13:53
other Frameworks sure
02:13:55
but uh Express is very Bare Bones
02:13:58
um there's only so much that it does
02:14:01
so
02:14:02
um
02:14:05
yeah you can do a lot with Express and I
02:14:07
mean I've built entire production apis
02:14:10
that are still in use that were built
02:14:12
with Express
02:14:14
um
02:14:15
but these days there are more
02:14:17
full-featured Frameworks that
02:14:20
uh take away a lot of the boilerplate
02:14:22
and a lot of like the manual stuff so
02:14:24
yeah
02:14:25
oh yeah you can do most things
02:14:30
uh all right
02:14:42
uh what do I think about HX what is what
02:14:46
is HX
02:14:52
how do I find it if I just search the
02:14:54
web for HX
02:14:56
will I find it
02:14:59
in what context JavaScript
02:15:04
htmx
02:15:09
you talking about HDMX
02:15:16
this
02:15:19
I mean let me know if you're still here
02:15:21
GG because I actually don't know what
02:15:22
you're talking about
02:15:24
all right daddy Ray has a question uh
02:15:26
I'm looking to use an external database
02:15:27
for my node.js project and moving away
02:15:30
from the Json files what's better
02:15:33
or Google Sheets API I tried and
02:15:35
had problems between mongodb and
02:15:36
mongoose
02:15:39
um
02:15:43
I would say prop probably is going
02:15:46
to be better
02:15:47
um
02:15:49
because like Google Sheets uh
02:15:53
I don't I don't know what their SDK is
02:15:55
like
02:15:56
and also like eventually if you want to
02:15:58
move Beyond because so I know I know
02:16:00
Daddy Ray has been working on
02:16:02
like a bot I think for twitch chat or a
02:16:05
Discord bot
02:16:07
um and they were using like a flat Json
02:16:10
file
02:16:11
I mean I think if you if you want to go
02:16:13
beyond that like
02:16:15
um eventually build apps outside of this
02:16:18
bot that you've been working on is
02:16:21
probably going to have the most
02:16:21
crossover like if you decide to build an
02:16:24
app outside of that like
02:16:25
it probably makes sense to choose
02:16:27
something like
02:16:28
um yeah you could do you could do
02:16:29
couchdb I've never done couchdb
02:16:32
um
02:16:33
but it is a uh
02:16:35
nosql database that has like an HTTP API
02:16:41
um so that's a potential option
02:16:43
but yeah in in my in my opinion and if I
02:16:46
was building it I would go with an a
02:16:48
database I would go with or some
02:16:50
other nosql database
02:16:52
I probably wouldn't go with Google
02:16:53
Sheets
02:16:55
um you could
02:16:56
you could but I think you might even run
02:16:58
into issues there with like oauth and
02:17:00
like just trying to get the right
02:17:01
privileges to write to the sheet
02:17:04
um
02:17:05
but I guess it also depends on your use
02:17:07
case like if you have a specific Google
02:17:09
sheet that you want non-technical users
02:17:12
to be able to modify or change
02:17:15
uh then maybe that does make sense but
02:17:18
otherwise you would have to build some
02:17:19
kind of front end for people to be able
02:17:21
to change things
02:17:28
but yeah I would I would go with I
02:17:30
mean you can also look I don't know if
02:17:31
you were using
02:17:32
um like knee DB
02:17:34
but knee DB uh is file based but you're
02:17:37
like you're not actually I think these
02:17:39
days low DB is probably more popular
02:17:42
right
02:17:46
yeah
02:17:49
um
02:17:50
this behind the scenes uses Json files
02:17:52
but the actual methods that you call
02:17:56
uh are fairly straightforward
02:18:01
but yeah that's my advice I try to
02:18:03
figure it out with and mongoose
02:18:11
all right this question comes from Adi
02:18:14
they say I'm a self-taught front-end
02:18:16
developer but where I live there are not
02:18:18
really any opportunities for a junior
02:18:19
developer
02:18:21
I thought about volunteering for some
02:18:22
non-profit but opportunities I found
02:18:24
required you to have job experience in
02:18:26
order to be a volunteer
02:18:30
that seems weird it's like we want you
02:18:34
to volunteer but you have to have
02:18:35
experience
02:18:36
but that's unfortunate okay so I'm kind
02:18:38
of stuck in this vicious cycle where I
02:18:40
would need some volunteering experience
02:18:41
for a job but would need a job
02:18:43
experience for volunteering what would
02:18:44
you recommend for guys like me
02:18:46
um
02:18:49
yeah I think honestly anyone that's
02:18:51
trying to get a job in web development
02:18:54
or whatever else I think the the easiest
02:18:56
thing you can do is just work on
02:18:57
personal projects and make sure you have
02:18:58
a good a good portfolio but yeah it is
02:19:01
the old catch 22. it's like uh you you
02:19:03
want to work a job but the job requires
02:19:05
experience so you can't find a job to
02:19:06
get that experience yeah it's it's
02:19:08
definitely a thing
02:19:10
um
02:19:11
and uh in the development world like
02:19:14
having your I I would not recommend
02:19:16
lying you can if you want to and
02:19:19
honestly people have gotten gotten jobs
02:19:21
that way
02:19:23
uh where they lie about their past
02:19:25
experience but somebody's going to find
02:19:26
out eventually and that's never a never
02:19:29
never ends well so yeah I think the
02:19:32
easiest thing you can do is start to
02:19:33
build out a portfolio of projects right
02:19:36
so they're gonna say well you have a
02:19:38
year of experience with JavaScript and
02:19:41
you can say well not working a job but
02:19:43
you can see this code base where I've
02:19:45
been working on for the past
02:19:47
year and a half and this is this is the
02:19:50
the thing that I've built and this is
02:19:51
what I've done so that's typically why
02:19:53
um
02:19:53
a project like most newer developers
02:19:56
that don't have a computer science
02:19:58
degree or haven't worked jobs before
02:20:01
that's why they have a portfolio is to
02:20:02
kind of show that you
02:20:04
know how to code you know how to do the
02:20:06
thing so
02:20:08
yeah number one you should have a
02:20:09
portfolio and be working on projects for
02:20:12
your portfolio if you can't find other
02:20:14
things to do and that should be one of
02:20:15
your main priorities
02:20:18
um and then also you could try to do
02:20:20
some open source contribution right so
02:20:23
um there's a quite a few YouTube videos
02:20:25
out there on how to find an open source
02:20:27
project
02:20:29
to contribute to and a lot of projects
02:20:31
that are structured will will actually
02:20:32
have issues that say good for beginners
02:20:35
or like good first issue
02:20:37
um
02:20:38
so you could spend your spare time
02:20:39
working on those and then now you you do
02:20:41
have some experience right so like you
02:20:43
weren't getting paid for it because it's
02:20:44
like open source work
02:20:46
but uh if you
02:20:49
potentially have a spot in your
02:20:50
portfolio where you can mention like
02:20:51
these are all the libraries that I
02:20:53
contributed to and these are the PRS
02:20:54
that I closed and you can like literally
02:20:56
link to those that could help out as
02:20:58
well
02:21:00
but yeah it's tough it's tough out there
02:21:01
so that would be my advice make sure you
02:21:03
have a portfolio work on portfolio
02:21:05
projects and then also potentially try
02:21:07
some open source contribution
02:21:09
yeah
02:21:11
yeah and I think I think um uh cocoyu is
02:21:14
absolutely right so a lot of these jobs
02:21:16
that you're potentially applying to if
02:21:18
they say you need one year of experience
02:21:20
or two years of experience you could
02:21:22
still apply and you could just say well
02:21:26
my um my experience working on these
02:21:30
portfolio projects was a year experience
02:21:33
like I wasn't getting paid for it it
02:21:34
wasn't a job but I do have that
02:21:35
experience so you're not technically
02:21:37
lying it's just you don't have the
02:21:39
professional experience
02:21:41
um
02:21:42
which may not be required so yeah
02:21:44
hopefully that helps Audi
02:21:51
all right
02:21:54
Gigi had another question
02:21:56
yeah of course Audi and again hopefully
02:21:58
that helps best way to learn and
02:21:59
understand angular 2
02:22:02
currently working on some old front
02:22:03
encode and I can't keep my motivation
02:22:05
uh honestly I mean as far as I know the
02:22:07
angular angular docs are where it's at
02:22:10
like every everything about angular is
02:22:11
and like these these are very expansive
02:22:15
docs that just keep going and there's
02:22:17
just there's just so much in these docs
02:22:20
so uh I would recommend the angular
02:22:22
documentation um I don't know if they
02:22:24
have any like online communities like
02:22:26
Discord and stuff like that but yeah
02:22:27
that's that's what I would recommend
02:22:29
and in terms of keeping your motivation
02:22:31
uh
02:22:33
I don't have any advice on that I I it's
02:22:36
just just try your best try your best
02:22:39
um
02:22:41
all right programmer Jeff as a thing I'm
02:22:44
just learning webdev HTML CSS and
02:22:46
JavaScript after like 15 years any
02:22:48
advice on some of the new apis or kits
02:22:50
I've heard a lot of buzzwords like svelt
02:22:52
react node I know it probably depends on
02:22:54
purpose or projects but just to make
02:22:55
dazzling websites brief answer is okay
02:22:57
sure
02:22:58
um
02:22:59
yeah it's okay
02:23:01
let me rephrase the question uh you're
02:23:04
someone that
02:23:05
um has done development before like 15
02:23:09
years ago and uh you're trying to learn
02:23:12
again
02:23:14
and there's a lot of stuff and you don't
02:23:16
know what you should focus on
02:23:18
I would say these days react is kind of
02:23:21
everywhere
02:23:22
um
02:23:23
and
02:23:25
if you can equate that to 15 years ago
02:23:27
like 15 years ago people were building
02:23:29
websites and they were almost always
02:23:30
including
02:23:31
I guess it was probably less than 15
02:23:33
years ago but the almost always
02:23:35
including things like jQuery or low Dash
02:23:38
these days when someone decides to build
02:23:40
a website they're building it with react
02:23:43
or they're building it with svelt or
02:23:44
they're building it with View
02:23:46
um
02:23:47
or they're building it with angular like
02:23:49
that's basically the the choice you pick
02:23:51
when you're building a web application
02:23:53
and I think that's that's the other
02:23:54
thing to consider is 15 years ago there
02:23:58
were not a lot of web apps there are a
02:24:00
lot of web sites right and so a website
02:24:03
is typically mostly static content
02:24:07
very informational
02:24:09
uh think of it like a like a brochure
02:24:12
website it has some information about a
02:24:14
thing but it's not very interactive
02:24:16
that's a website these days people are
02:24:18
building web apps or web applications
02:24:20
and so they're highly interactive and
02:24:23
things on the page are constantly
02:24:25
changing
02:24:26
um and like new data is coming in and
02:24:28
like different things like that and
02:24:30
that's why people are choosing like
02:24:32
reacts filter View
02:24:33
they allow you to build web applications
02:24:36
right so basically you have a single web
02:24:38
page where all of the stuff happens
02:24:40
inside that web page similar to how when
02:24:43
you have a mobile app everything is
02:24:44
happening in like contained within that
02:24:46
mobile app uh so I think that's one of
02:24:49
the major differences from websites back
02:24:51
then versus websites these days is
02:24:53
most of the time it's not just a website
02:24:55
it is a web application
02:24:59
so I think you can start there if you're
02:25:01
trying to just build a website
02:25:06
look into Astro
02:25:08
I feel like I think that's good I think
02:25:10
that's the advice that I'll give you is
02:25:11
like if you're just trying to build
02:25:12
websites look into Astro because this
02:25:14
lets you build uh websites very easily
02:25:17
and once you start looking into the
02:25:19
documentation you can pick and choose
02:25:21
you can use Astro components and they
02:25:22
have docs on that or if you want to like
02:25:25
learn the basics of react you can use
02:25:26
react components in your Astro or Astro
02:25:28
app or you can use Spell components or
02:25:31
view components so
02:25:33
if you're just trying to build websites
02:25:34
look into something like like Astro
02:25:37
um
02:25:41
yeah it depends on the project I guess I
02:25:43
don't have a good answer for you because
02:25:44
then it gets into well if you're trying
02:25:46
to build a web app then you start to
02:25:49
start to think about well does it need
02:25:50
to be server rendered or is it just a
02:25:52
single page application and that's where
02:25:55
something like next.js gets involved
02:26:00
I don't know I will say it's a really
02:26:02
tough time to get back into web
02:26:03
development right now because like even
02:26:05
even I'm not sure of all the next JS
02:26:07
stuff
02:26:09
so
02:26:13
hopefully that helped programmer Jeff I
02:26:15
don't even know if I answered your
02:26:15
question I want to keep moving
02:26:19
um
02:26:23
all right this one we answered that one
02:26:30
what's up St Louis good to see you
02:26:37
yeah we'll answer winter not found and
02:26:38
then we'll answer uh Bridges which is a
02:26:41
question the winter not found says
02:26:42
what's your opinion on so many jobs
02:26:43
requiring react when there are other
02:26:46
Frameworks they view that have so few
02:26:47
opportunities at least from what I've
02:26:49
seen yeah it depends on where you are in
02:26:51
the world because uh view is actually
02:26:52
pretty popular
02:26:54
in China and in parts of Europe as well
02:26:58
um
02:26:59
but
02:27:02
um
02:27:04
react is basically it's just one right
02:27:06
so like that's why like a lot of
02:27:09
companies are hiring for it is because
02:27:11
it's easier to hire for it because so
02:27:13
many people are doing it and have
02:27:14
experience with it
02:27:16
doesn't mean it's better
02:27:18
it just means that it's more prevalent
02:27:20
uh which also means there's more
02:27:22
libraries there's there's more potential
02:27:24
like uh courses and documentation to
02:27:28
learn about it so that's that's that's
02:27:29
really why you see it in most places but
02:27:32
I will say it's not the only thing and
02:27:33
you will you can find jobs that are
02:27:35
doing view or that are doing svelte or
02:27:37
even angular
02:27:39
um but it's just like reacts has
02:27:42
basically
02:27:45
um
02:27:46
it's it's it's it's past hype it's here
02:27:49
to stay and so many people have adopted
02:27:52
and used it that for a lot of companies
02:27:54
it's it's easier to to hire a react to
02:27:57
build things with react because there
02:27:59
are so many devs available
02:28:01
and so many libraries and in various
02:28:03
things that you can use with it
02:28:04
available
02:28:05
so
02:28:06
yeah that's that's that
02:28:09
um and also people are in companies are
02:28:11
transitioning to things like View and
02:28:12
spelled in uh but react is here to stay
02:28:16
okay uh Rich says uh what's up CJ
02:28:19
Community hello welcome in I was doing
02:28:21
the memo Dev program I haven't heard of
02:28:23
this what is it
02:28:27
emo
02:28:29
it's a memo become a professional
02:28:30
developer and get hired
02:28:33
okay so it's like a coding bootcamp
02:28:36
cool
02:28:38
but now they're closing I won't be able
02:28:40
to finish on time gonna search out other
02:28:42
programs
02:28:44
um any thoughts
02:28:46
so yeah I'm not even familiar with what
02:28:48
exactly they offer
02:28:51
um Let Me Know Rich were you doing the
02:28:53
front end or the full stack one
02:29:03
end okay so
02:29:05
um they cover all this stuff
02:29:08
yeah let me give you let me give you
02:29:09
some options so first of all the Odin
02:29:11
project
02:29:12
uh completely free
02:29:15
um
02:29:17
yeah so there's a there's a few we'll
02:29:19
mention so first of all Odin project
02:29:20
it's all self-paced if you go to the
02:29:22
curriculum
02:29:24
um you can look at
02:29:26
it technically says uh well actually I
02:29:28
guess if you go to foundations does this
02:29:29
cover react
02:29:33
it doesn't but this does have
02:29:34
foundations in JavaScript and then the
02:29:36
full stack track
02:29:40
is this yeah the full stack check uh
02:29:43
covers react like in here so this this
02:29:45
potentially could be a place to to go
02:29:49
um
02:29:50
to finish your Learning Journey like I'm
02:29:52
I'm sure parts of the the early part
02:29:54
earlier part of the curriculum you could
02:29:56
probably skip
02:29:58
um but then you could like dive into the
02:30:00
to the JavaScript section
02:30:02
um but this is completely free but it's
02:30:04
also self-paced
02:30:07
um I think if you're a good uh
02:30:09
self-starter like you're you're okay
02:30:11
with making having you're okay with
02:30:13
motivating yourself and you have the
02:30:15
diligence to go through and actually do
02:30:18
what these articles say to do like this
02:30:20
says
02:30:21
um here are some resources you should
02:30:23
probably spend the time looking at those
02:30:25
resources
02:30:27
um or like it will give you an exercise
02:30:30
uh or a project you should actually take
02:30:33
the time to implement that project right
02:30:34
because if you um if you don't and you
02:30:37
just like read each article and you're
02:30:39
like I'm done
02:30:40
you're not actually going to learn the
02:30:41
thing so I think that's that's one of
02:30:43
the main things with the Odin projects
02:30:44
is it's really up to you to spend the
02:30:46
time making sure you go through all of
02:30:48
the resources and do all the projects
02:30:50
and everything else
02:30:51
um yeah full stack open is another thing
02:30:54
it's also free
02:30:56
um isn't it like University of Helsinki
02:30:59
or something like that yeah
02:31:04
I don't know if that's the right name it
02:31:05
is Helsinki I don't know if it's some
02:31:07
some University in Finland
02:31:10
um
02:31:12
but they also have a full curriculum
02:31:15
with all this stuff so that's another
02:31:17
thing to look at yeah absolutely look at
02:31:18
100 devs now uh for a while this was
02:31:22
live on
02:31:24
uh
02:31:25
uh live on Twitch I don't know if it's
02:31:27
starting up again but you should
02:31:28
definitely go drop a follow on uh learn
02:31:30
with Leon
02:31:34
um
02:31:35
for a while he was streaming basically
02:31:38
the lessons and they were free to attend
02:31:40
and they had a Discord
02:31:42
or you could get help and do the
02:31:43
exercises and stuff like that
02:31:46
does anyone know what is the
02:31:48
um
02:31:52
someone was telling me about it like
02:31:53
someone oh here we go is this it the 100
02:31:57
devs progress tracker
02:32:01
this might be it
02:32:03
anybody that's with 100 has let me know
02:32:05
in the chat but but basically uh the the
02:32:07
only way to consume 100 devs right now
02:32:10
would be to go over to YouTube
02:32:14
um
02:32:15
so if you look at Leon's Channel on
02:32:17
YouTube uh and you look at playlists
02:32:20
there specifically is the uh these two
02:32:23
playlists that have like all of the
02:32:25
lessons that he taught live on Twitch so
02:32:26
you could watch those but you
02:32:29
um you'd have to figure out where to get
02:32:31
all the resources and everything else I
02:32:32
believe one of the hundred devs people
02:32:34
made this website and it makes it so
02:32:37
that you can actually track your
02:32:38
progress through all of the lessons
02:32:41
um and then like it lists out the yeah
02:32:44
this seems like it's it this has a lot
02:32:45
of stuff too so you can check this out
02:32:46
like this basically um
02:32:49
takes all of the 100 Dev stuff and wraps
02:32:51
it up into a curriculum of sorts so it's
02:32:53
a bit easier to track what you're doing
02:32:57
um
02:32:58
so check that out
02:33:00
and then also there's a free code cam
02:33:04
um
02:33:06
so
02:33:07
this is completely free
02:33:10
um they have the the web design
02:33:11
certification I believe
02:33:13
this does like the basics of HTML CSS
02:33:15
and JavaScript and then there's the
02:33:18
front end Library a front-end course
02:33:20
that actually takes you through
02:33:22
uh eventually react
02:33:24
so yeah free codecamp is another option
02:33:27
and then if you're looking for another
02:33:30
boot camp to pay for I I don't have any
02:33:33
advice on that I would just search the
02:33:34
web uh search for like uh coding
02:33:36
bootcamp
02:33:38
reviews
02:33:40
um
02:33:42
and
02:33:45
yeah I don't know if course report is
02:33:46
good maybe switch up
02:33:48
switch up specific to coding boot camps
02:34:12
fascinating
02:34:15
um
02:34:16
so yeah I'm gonna so yeah you can you
02:34:17
can like look at this article I actually
02:34:19
don't even know what switch up is but
02:34:20
the reason that I'm like hesitant of it
02:34:23
is it doesn't even mention touring
02:34:24
School
02:34:27
um during school of of software and
02:34:28
design so the the these this this uh
02:34:31
school code coding coding school uh
02:34:35
originated in Colorado but now they're
02:34:37
completely online
02:34:39
um
02:34:40
it's not good that their website is
02:34:42
loading so slow though there we go
02:34:46
out in the list but the reason I wish I
02:34:47
mentioned it is because my wife works
02:34:49
there
02:34:50
uh so I don't know check it out
02:34:53
um and then
02:34:54
uh this list did have hack reactor
02:34:58
here and I used to work at a company
02:35:01
called Galvanize but Galvanize acquired
02:35:05
hack reactor and then
02:35:07
um they replaced the entire galvanized
02:35:10
education program with hack reactor so
02:35:12
like I can't recommend this but you can
02:35:14
look into it because it's somewhat
02:35:15
related to the company that I used to
02:35:17
work for
02:35:18
but yeah
02:35:21
um
02:35:23
basically do your own research that's
02:35:25
all I have to say and honestly a lot of
02:35:27
the like if you're for a for a a
02:35:29
front-end course or front-end
02:35:32
uh uh boot camp
02:35:34
you can self-teach and that's basically
02:35:36
like why I was giving all those
02:35:37
resources like if you're diligent enough
02:35:39
and like you are like you've got the the
02:35:42
drive to do it you actually can
02:35:45
completely self self teach now you're
02:35:47
gonna miss out on like instructor
02:35:49
feedback and also potentially like
02:35:51
teamwork but there are other ways to
02:35:54
find those things
02:35:56
um outside of a coding boot camp like
02:35:57
you can find mentors online I think the
02:35:59
100 devs Community has a Discord it's
02:36:02
probably uh you can probably find people
02:36:04
there if you want to like form a team
02:36:06
and like practice working on a team and
02:36:07
stuff like that so
02:36:09
I would say yeah like if you if you want
02:36:11
to self do go the self-taught route it's
02:36:13
going to be harder
02:36:14
but it will be free
02:36:17
um and then yeah do your own research
02:36:19
for for boot camps thanks for the
02:36:20
question
02:36:22
um
02:36:23
all right we're coming up on the end of
02:36:25
stream here
02:36:27
so let's do a lightning round
02:36:30
and uh go on from there I don't know
02:36:32
what they were asking so we'll go from
02:36:33
here
02:36:35
um do I have any advice for npm build
02:36:36
production
02:36:38
on every merge to Manchester main branch
02:36:40
and auto up Auto tagging in the repo the
02:36:43
only advice I have would be look into
02:36:44
GitHub actions because GitHub actions
02:36:46
are going to let you do those things
02:36:48
uh
02:36:51
uh within within a GitHub repo if you're
02:36:53
on GitHub if you're not on GitHub then
02:36:54
search for the things specific to
02:36:55
whatever you're using
02:36:58
um oh yeah I guess I guess I mean I have
02:37:00
a Discord yes the issue is like it's not
02:37:03
very active these days but we do have a
02:37:04
place where you can ask for help and
02:37:06
thank you thank you Chase
02:37:08
um or rich rich or not rich Casey sorry
02:37:10
I didn't mean to call you chase thank
02:37:12
you rich thank you for that uh that
02:37:13
Prime appreciate it yeah we have a
02:37:15
Discord
02:37:16
um
02:37:17
I'm not as active in there as I should
02:37:19
be and uh that's basically why I'm not
02:37:21
talking about it but join the Discord we
02:37:23
do have a help Forum we do have a we
02:37:25
have a channel called find a pair I just
02:37:28
don't know how to active it is is the
02:37:30
thing what's up Shulman yeah my advice
02:37:32
is look into GitHub actions it'll do all
02:37:34
of those things
02:37:36
um what are my thoughts on developer
02:37:37
productivity like pieces.app have you
02:37:40
used workflow productivity tools like
02:37:41
this before don't know what it is I'm
02:37:43
not gonna go to it because that would be
02:37:45
um free advertisement but um I will talk
02:37:49
about Trello because I use trellos
02:37:52
for me like the like developer
02:37:54
productivity
02:37:55
I guess like if is like project
02:37:57
management I guess in a way so like yeah
02:37:59
using something to manage projects like
02:38:00
Trello that's what I've used before uh
02:38:03
in terms of
02:38:05
um like the apps I use on my my laptop
02:38:08
I don't know I've got
02:38:11
yeah I don't yeah I don't know I don't
02:38:12
know
02:38:13
uh I appreciate that uh well it's Waltz
02:38:16
Walt smacked man thank you thank you for
02:38:19
the the comment
02:38:22
um
02:38:23
so yeah I don't have any advice on
02:38:24
productivity just uh try to do
02:38:27
everything
02:38:29
um as best as you can and if you feel
02:38:31
like you're doing something that isn't
02:38:34
as best as you can look into something
02:38:36
that will make the thing you're doing
02:38:38
better than what you're doing that's my
02:38:40
advice on productivity
02:38:42
no I'm I'm over an ocean too like I
02:38:44
everyone was like oh you should use
02:38:45
notion
02:38:48
um I tried I guess is these are like
02:38:51
YouTube videos and stuff I was gonna
02:38:53
work on I just prefer Trello like Trello
02:38:55
Trello is
02:38:57
um is really good at project boards
02:38:59
notion is good at a bunch of other
02:39:01
things and like allows you to use
02:39:02
project boards but all the some of the
02:39:05
simplest things I could do in Trello I
02:39:06
haven't figured out how to do a notion
02:39:08
yet and so that's my other piece of
02:39:09
advice is don't spend all your time
02:39:12
learning tools because you're just gonna
02:39:13
waste your time learning those tools
02:39:15
when you could have just gotten it done
02:39:16
the original way or like some other way
02:39:18
um obviously tools are good
02:39:21
right like some things are worth
02:39:22
learning but uh
02:39:25
these days I've
02:39:28
uh I guess I've the things that I
02:39:31
already use work for what I'm doing so I
02:39:33
haven't found the need to look into
02:39:34
other things
02:39:36
yeah
02:39:37
but yeah I would say like use tools to
02:39:39
an extent but don't use tools just to
02:39:41
use tools use tools because they're
02:39:43
useful and they provide value and they
02:39:46
save you time and all that
02:39:50
um all right what would I recommend to
02:39:53
include in your portfolio
02:39:55
you should include projects that
02:39:57
showcase the type of development that
02:40:00
you want to do right so if you really
02:40:03
like working on
02:40:04
animations and like custom you
02:40:07
completely custom uis and stuff like
02:40:09
that you should have a project in your
02:40:11
portfolio that demonstrates that right
02:40:13
you should have an app that has cool
02:40:14
animations
02:40:16
um
02:40:16
you should potentially write a uh a
02:40:20
design system from scratch and like have
02:40:22
that in your portfolio those kinds of
02:40:24
things but if you're let's say you're a
02:40:27
back-end developer and you want to find
02:40:28
a job building apis and working the
02:40:30
databases your portfolio should have
02:40:32
like a really well written API right you
02:40:35
should
02:40:35
it should be documented it should be
02:40:37
tested potentially it should integrate
02:40:39
something like continuous deployment
02:40:42
um
02:40:43
different things like that so my advice
02:40:45
is to put things in your portfolio that
02:40:47
showcase the kind of work that you want
02:40:49
to do what's up Laura welcome in
02:40:52
um
02:40:54
which is different advice for everybody
02:40:55
because everybody wants to potentially
02:40:57
get a different kind of Dev job I talked
02:41:00
about this earlier but I would say don't
02:41:02
try not to include like to do apps or
02:41:05
tutorial projects like the things in
02:41:07
your portfolio should showcase the work
02:41:09
that you've done not the work that
02:41:11
you've copied other people that you've
02:41:13
copied from other people
02:41:15
now that said
02:41:17
you can take something that you learned
02:41:19
in a tutorial
02:41:22
and rework it to be your own app and I
02:41:24
think that can be included in your
02:41:25
portfolio because you're basically
02:41:26
showing that you know how to take the
02:41:28
thing and modify it for your own needs
02:41:30
so yeah
02:41:32
um is the portfolio needed in
02:41:34
development so I and I also talked about
02:41:35
this earlier you really only need a
02:41:37
portfolio if you don't have prior work
02:41:40
experience or you don't have like a
02:41:42
computer science degree
02:41:44
um because the portfolio is basically
02:41:46
how you
02:41:47
convince and conveyed to an employer
02:41:49
that you know what you're doing you like
02:41:51
you have experience with this without
02:41:53
having had a job before
02:41:54
so yeah but yeah that's my advice for
02:41:56
for portfolio put things in it that
02:41:58
showcase
02:41:59
uh what you do well and what you want to
02:42:01
get hired for
02:42:04
yeah
02:42:06
you're so yeah yeah
02:42:08
um and then yeah I think that's a good
02:42:10
point uh crafty Becky because as far as
02:42:13
I know front-end mentor
02:42:15
um they have like descriptions of
02:42:17
projects but they don't like they don't
02:42:19
give you the code they just describe
02:42:21
this is the thing that you should
02:42:22
Implement and it's really up to you to
02:42:23
implement and I think that's that's a
02:42:25
good way to go about it as well because
02:42:26
every if if if multiple people have this
02:42:30
link sharing app in their portfolio each
02:42:32
one of them implemented it in their own
02:42:35
way and so it's going to be unique to
02:42:36
their portfolio which is totally fine
02:42:39
all right um
02:42:42
uh not right now uh I am Slim
02:42:47
uh but tune in tomorrow because it'll
02:42:50
probably be way less busy because I'm
02:42:52
going live tomorrow night uh but we're
02:42:54
we're we're wrapping up we got four
02:42:56
minutes left I'm just trying to answer
02:42:57
as many as I can before we go
02:43:00
um any documentation on integrating AWS
02:43:03
Cognito with a website I will need the
02:43:04
website to edit tables using graphql
02:43:07
I have no idea I only I haven't used
02:43:10
Cognito myself I only helped someone
02:43:12
that was using cognito
02:43:14
um
02:43:17
but I guess it also depends what kind of
02:43:19
backend you have so is it a next JS
02:43:22
backend is it an Express backend
02:43:25
is it like a serverless backend
02:43:29
we'll figure it out
02:43:30
so yeah your your searches for the web
02:43:33
should be more specific to like what
02:43:34
kind of backend you have that you're
02:43:35
trying to integrate
02:43:37
um
02:43:40
uh trying to break through for my first
02:43:42
grad job I would love to get a react job
02:43:44
because that's what I'm most competent
02:43:45
with but most react jobs aren't entry
02:43:47
level any advice
02:43:49
um
02:43:51
if a job says that it requires two to
02:43:54
three years of experience you should
02:43:55
apply anyways
02:43:57
um because a lot of times it is a wish
02:43:59
list now you shouldn't lie and say that
02:44:01
you have a two to three years of
02:44:03
experience you should be honest about
02:44:04
that but
02:44:07
um
02:44:09
if you at least get past the resume
02:44:11
phase and like you're at least talking
02:44:12
to people at that company
02:44:15
um at that point they might just like
02:44:17
you as a person so uh my advice is apply
02:44:20
to everything even if it says you need
02:44:22
multiple years of experience
02:44:24
um but with that said you should have
02:44:26
really and you wanna if and you want a
02:44:27
job in react you should have really good
02:44:29
react projects in your in your portfolio
02:44:32
um that show that you are you are you
02:44:34
are competent with react
02:44:36
yeah that's the best advice I got is
02:44:38
apply anyways
02:44:41
put the best stuff you can in your
02:44:43
portfolio
02:44:45
um
02:44:46
and you you may apply to jobs that don't
02:44:49
necessarily list react right you can you
02:44:51
can you can find a an entry level or
02:44:53
Junior web development job maybe where
02:44:55
you're not working with react but at
02:44:57
least you can now get some experience
02:44:58
and then eventually you might go find a
02:45:01
job where you work and react or if you
02:45:02
get a job at that company you can maybe
02:45:04
convince them eventually to like use
02:45:06
react or something like that
02:45:08
but uh that would be my advice uh
02:45:12
so yeah hopefully that helps
02:45:14
okay
02:45:16
um
02:45:23
what are some real life examples uh with
02:45:25
proxies like view does in its reactivity
02:45:27
system the thing about proxies is like
02:45:29
they typically are are really for
02:45:32
libraries
02:45:35
um and specifically we're talking about
02:45:36
proxies in JavaScript
02:45:38
and it makes the most sense for
02:45:40
libraries to implement proxies because
02:45:42
it makes it so that the consumer of the
02:45:44
library
02:45:45
um
02:45:47
doesn't have to do things as manually
02:45:49
like I don't know if that's the correct
02:45:52
English but but basically so a proxy
02:45:54
lets you have an object and then you can
02:45:57
have like an Interceptor so you can put
02:45:59
that object into a proxy and then you
02:46:02
can have functions that get called and
02:46:05
like intercept whenever a property is
02:46:07
getting retrieved or a property is
02:46:09
getting uh set you can do custom things
02:46:12
there so it honestly makes the most
02:46:15
sense to do that inside of a library so
02:46:17
something like
02:46:18
mob X which is uh State Management for
02:46:22
react internally they use proxies and
02:46:25
like for view their state management
02:46:26
system they use proxies and both of
02:46:28
those things use proxies so that the end
02:46:30
user of the library can write very
02:46:32
simple code to update the state they
02:46:33
don't have to know about or add a bunch
02:46:35
of of Handler event handlers and stuff
02:46:38
like that they can just write some very
02:46:40
simple code behind the scenes is doing
02:46:42
more complex things so yeah I can't
02:46:44
think of a
02:46:46
of an example of where I would write my
02:46:48
own proxy in a code base
02:46:51
um
02:46:52
but uh quick quick plug from myself a
02:46:56
long time ago I wrote a
02:46:58
Hello friends welcome to coding I was
02:47:00
like where's that sound coming from
02:47:03
um I did a meet-up talk
02:47:06
this one where I wrote a a framework
02:47:10
from scratch like all in the span of
02:47:12
like 20 minutes or so
02:47:15
um and we used a proxy because uh we
02:47:19
wanted to automatically have uh view
02:47:21
updates based on state changes
02:47:24
um so I'm about to leave go watch that
02:47:27
video just to keep yourself entertained
02:47:29
all right
02:47:31
um
02:47:33
how can I make myself do the finishing
02:47:34
touches inside projects and finally
02:47:36
publish them
02:47:41
I don't know I don't know I don't know
02:47:42
if I have good advice for this I think
02:47:44
ultimately like if you wanted to be part
02:47:46
of your portfolio or something like that
02:47:47
you want to make sure that you have a
02:47:50
good readme you want to make sure that
02:47:52
it's deployed and then like yeah and I
02:47:55
think that's good advice from Little
02:47:56
Sheep is like just make sure you don't
02:47:57
overdo the projects right so if you if
02:47:59
you keep the scope small enough then you
02:48:02
can finish them more easily right so
02:48:04
yeah like don't don't bite off more than
02:48:06
you can chew I guess is good advice I
02:48:08
don't know I don't know or like Saint
02:48:10
Lola is saying just do it just do it
02:48:14
um
02:48:16
and we'll look at this from sej uh have
02:48:19
I seen this report on the npm
02:48:20
vulnerability the massive bug at the
02:48:23
heart of the npm ecosystem
02:48:36
um
02:48:37
okay in my short read of the tldr
02:48:40
yes this seems like an issue it seems
02:48:42
like someone could publish a malicious
02:48:44
package where the Manifest is different
02:48:46
from the contents and there's no way to
02:48:49
know unless you actually do an npm
02:48:51
install
02:48:52
um yeah so bad actors can hide malware
02:48:55
and Scripps indirect or transitive
02:48:56
dependencies that go undetected
02:48:59
so yeah it's an issue and it probably is
02:49:01
already happening a lot and also I like
02:49:03
this image it's like a glitched out npm
02:49:05
there's bun there's Dino there's a
02:49:07
socket IO GitHub snake this is cool
02:49:09
that's a cool image so yeah it's a
02:49:11
problem I'll have to read read more
02:49:13
about it later though
02:49:15
all right
02:49:16
um
02:49:18
Alex says uh what do you do when you
02:49:20
feel inspired and you don't know what to
02:49:22
program
02:49:24
well typically if I feel inspired I'm
02:49:26
inspired to do a specific thing
02:49:28
so I don't know if I can relate relate
02:49:31
to that
02:49:32
um
02:49:34
but again it goes back to the other
02:49:35
advice just do it it's just like
02:49:36
whatever you're inspired for just just
02:49:38
start just start making it happen
02:49:40
all right last question and then we're
02:49:41
gonna get out of here
02:49:43
for someone's brain that doesn't work
02:49:44
well with documentation and better with
02:49:46
video what are suggestions for learning
02:49:48
with text-only documentation
02:49:51
um
02:49:52
practice I think the
02:49:55
um
02:49:57
the potential issue is
02:49:59
it maybe feels
02:50:02
like video is better
02:50:04
because of the way that it's presented
02:50:06
um like it it and honestly like I I want
02:50:09
to do a whole YouTube video about this
02:50:11
how
02:50:13
um
02:50:15
base well hello friends welcome to keep
02:50:17
popping up
02:50:19
I will preface this with fireship is
02:50:21
awesome and extremely entertaining and
02:50:24
deserves all two million of the
02:50:27
subscribers that they have
02:50:28
that said
02:50:31
fireships videos are they're like a trap
02:50:34
it you you watch them you feel like you
02:50:38
learned something
02:50:40
but really you just got exposure
02:50:43
and like exposure and learning and
02:50:45
practice are two very different things
02:50:48
but
02:50:50
uh pretty pretty often with with
02:50:52
honestly with a lot of video and YouTube
02:50:54
content
02:50:55
you fall into this trap of like seeing
02:50:58
the person in the video do the thing and
02:51:00
like it makes sense and the reason it
02:51:02
makes sense is because they've planned
02:51:04
it right they've laid it all out to be
02:51:07
in a very specific way that will make
02:51:08
sense to the viewer of the video and
02:51:10
like that's the goal of creating
02:51:12
uh content that people want to watch is
02:51:15
it makes sense and I think this is the
02:51:17
other thing that um that happened a lot
02:51:19
whenever I was a
02:51:21
um
02:51:22
uh an instructor
02:51:23
at a coding school
02:51:26
the way that I liked to teach was with
02:51:29
live coding and I mean that's that's I
02:51:31
mean I haven't really written much code
02:51:32
today but typically I like to teach with
02:51:35
code and that I'm showing the examples
02:51:37
in real time so you can actually see
02:51:39
what I'm talking about I'm not just like
02:51:40
pointing to code on a slide
02:51:42
but the issue with that oh not the issue
02:51:45
the the thing that you could potentially
02:51:46
take away from it watching that lesson
02:51:48
is because you watched me do the thing
02:51:50
and build the thing
02:51:52
and because it it made sense when I was
02:51:55
doing it
02:51:56
it feels almost like oh yeah I can go
02:51:58
home and do that
02:51:59
but the issue is when you go home to try
02:52:02
and do it on your own and you don't have
02:52:04
the instructor if they're doing the
02:52:05
exact things uh there's so many things
02:52:07
that you potentially missed that like
02:52:09
you didn't see the instructor do
02:52:12
um or that like weren't mentioned that
02:52:14
you have to actually learn yourself and
02:52:16
like figure out yourself and so what
02:52:18
point am I trying to make here
02:52:23
sometimes video feels like it makes more
02:52:26
sense but that's just because of the way
02:52:28
that it's laid out so I think my advice
02:52:30
is and it will take some practice but I
02:52:33
think ultimately like if
02:52:35
if you do not get good at reading
02:52:38
through documentation and also like
02:52:40
there are certain skills you can acquire
02:52:42
that make it easier to work well with
02:52:44
text documentation which is things like
02:52:46
skimming the documentation uh searching
02:52:50
for specific keywords like
02:52:53
I I don't ever read all of the
02:52:55
documentation right so like
02:52:58
um yeah I know exactly Tyrell and I
02:53:00
think that's kind of what I'm getting at
02:53:01
right now it's like documentation tell
02:53:04
typically tells you these are all of the
02:53:06
things that are available but it doesn't
02:53:08
assemble them into an app for you right
02:53:11
like it doesn't tell you like we'll do
02:53:12
this do this do this and then you're
02:53:14
done uh some documentation does but
02:53:16
that's more of like the tutorial or
02:53:17
getting started section of the docs
02:53:20
um the the docs that literally just list
02:53:22
the things that are available to you
02:53:23
don't have structure because it's
02:53:25
ultimately it's like Lego pieces like
02:53:27
here are all the pieces and it's up to
02:53:28
you to assemble them
02:53:31
um so yeah I I get I get that that can
02:53:34
be tricky but I think
02:53:35
it just it just comes with practice
02:53:38
um
02:53:38
I have been reading documentation for so
02:53:41
long
02:53:43
and I've done it so much that at this
02:53:45
point
02:53:46
it's a lot easier for me
02:53:49
to be uh let's I mean I guess I'll just
02:53:51
use super bass as an example because
02:53:52
it's on the mind it's a lot easier for
02:53:54
me to be just like dropped into a bunch
02:53:57
of documentation and then try to figure
02:54:00
out the the right the right things that
02:54:02
I need
02:54:04
um and then I would also say like don't
02:54:07
discount search like you you should
02:54:09
absolutely use the search feature to
02:54:10
find the specific things that you need
02:54:13
um
02:54:14
and
02:54:17
I think that's the yeah I think the
02:54:20
other thing Tyrell that you can try to
02:54:22
work on is
02:54:24
um
02:54:26
breaking things down into the the small
02:54:28
problems that need to be solved because
02:54:29
that's basically how you're going to
02:54:31
take the documentation and apply it to
02:54:33
the problem that you're trying to solve
02:54:34
right because like with the tutorial
02:54:35
they've already figured all of that out
02:54:37
they know what they want to do they know
02:54:39
what order they're going to do it in and
02:54:40
they know the pieces of the docs they
02:54:42
need to show you in order to do that
02:54:44
but the person that wrote that video
02:54:46
tutorial had to figure that out and
02:54:48
before they did that they had to break
02:54:50
down their problem into all right I know
02:54:52
this is what I need to do here this is
02:54:54
what I this is a small section of what I
02:54:55
need to do here and this is what I need
02:54:56
to do here now how do I do that you
02:54:58
figure it out like one step at a time
02:55:00
and each one of those things was
02:55:02
probably sourced from like a small
02:55:04
section of the docs so yeah honestly I
02:55:06
think my advice is is just read more
02:55:08
docs like it's I know it's not the
02:55:10
advice you want to hear but
02:55:13
I I do think
02:55:14
um it is some it is a skill that you can
02:55:17
learn
02:55:18
um that obviously like I mean the way
02:55:21
you mention it here is like for
02:55:22
someone's brain that doesn't work well
02:55:24
the documentation I I completely
02:55:26
understand that there are some people
02:55:27
that it's really hard to
02:55:31
um to take in like large large
02:55:34
blocks of text and stuff like that but
02:55:37
uh my advice is get used to it because
02:55:40
that's really the only way that you're
02:55:41
going to get past it and and really any
02:55:43
people that are creating like basically
02:55:46
fireship I gotta keep using them as an
02:55:48
example but
02:55:50
they essentially take the docs and boil
02:55:53
it down to two minutes and 20 seconds
02:55:54
like that's the skill that they've
02:55:56
gotten really good at but that means
02:55:57
that they had to get really good at
02:55:59
reading the docs and really good at like
02:56:01
basically take what the docs are saying
02:56:02
and making it to like an applicable
02:56:04
example
02:56:06
so
02:56:07
yeah hopefully that helps Tyrell and I
02:56:09
feel it's like it's the advice you don't
02:56:10
want to hear but my advice is you just
02:56:12
you just gotta you gotta power through
02:56:13
it you have to read the docs break
02:56:15
things down search the docs yeah
02:56:18
hopefully that helps
02:56:22
yeah and the more you do it the easier
02:56:24
it'll get absolutely
02:56:26
okay
02:56:28
yeah plus yeah and I'm not discounting
02:56:31
the entertainment Factor like he's good
02:56:33
at memes he's good at making jokes
02:56:36
um but but I think what's about good
02:56:41
I mean I want to do a whole video essay
02:56:43
on this because like
02:56:48
it's it is a trap that a lot of people
02:56:49
fall into like they think they're
02:56:51
learning when in reality they were just
02:56:54
exposed to a thing if they were to turn
02:56:56
that video off and just try to go apply
02:56:58
it immediately you probably aren't going
02:57:00
to be able to do that you're you're
02:57:02
still gonna need the docs you're still
02:57:03
gonna need uh more information and more
02:57:06
practice to actually say that you
02:57:08
learned a thing
02:57:10
I spend my advice a lot today is just do
02:57:12
it but I feel like sometimes that's what
02:57:14
people need to hear
02:57:16
um all right uh let's end the stream
02:57:18
with a tutorial on svelte look at my TED
02:57:22
Talk
02:57:23
all right we're gonna go into Focus mode
02:57:24
and I'm gonna teach you spell in uh
02:57:27
we're gonna do svelt in
02:57:29
uh six and a half minutes
02:57:31
um
02:57:37
wait does Veet have a svelt starter
02:57:41
they do we're gonna use the we're gonna
02:57:43
use the uh perfect I need this
02:57:47
um
02:57:48
honestly I don't even need to generate
02:57:50
an app I can just use their tutorial all
02:57:52
right but let's do it uh svelte in six
02:57:55
and a half minutes
02:57:56
here we go so uh svelte is a front-end
02:58:00
framework it's absolutely comparable to
02:58:03
react
02:58:04
which is also a front-end library for
02:58:07
building for building web apps it's
02:58:09
comparable to angular which lets you
02:58:11
build front-end web apps
02:58:13
um it's comparable to to view uh all of
02:58:17
these things are JavaScript libraries
02:58:19
and Frameworks that allow you to build
02:58:21
web applications and that's what you can
02:58:23
do with svelte so any of the things you
02:58:25
can do with these things you can also do
02:58:27
with felt that is what svelte is
02:58:30
now the underlying mechanisms for how it
02:58:32
achieves that are very different from
02:58:35
react angular and view so both react and
02:58:38
view use a thing called a virtual Dom in
02:58:40
order to determine what to update on
02:58:42
your page uh and I actually don't know
02:58:44
much about it I think maybe angular uses
02:58:46
a virtual Dom but the cool thing about
02:58:48
svelte is instead of doing a virtual Dom
02:58:50
it actually uh the code you write gets
02:58:54
turned into vanilla JavaScript
02:58:56
the code you write gets turned into I
02:58:58
didn't even start my timer
02:59:00
moving on to five minutes uh the code
02:59:03
you write
02:59:04
at the end of the day just gets turned
02:59:06
into the most performant uh vanilla JS
02:59:10
code that it that it can can be
02:59:13
so uh let's just look at the examples of
02:59:16
these of these felt apps and
02:59:19
I'll show you what you can do so for
02:59:21
example you have a file called app.felt
02:59:23
This is a component that's the other
02:59:25
thing about spell is it does component
02:59:27
based development so with like react
02:59:29
view angular all of these have adopted
02:59:31
this idea of components where you
02:59:33
essentially break down your user
02:59:34
interface into small little components
02:59:36
and then you write the code for those so
02:59:38
for example if we look at reddit.com and
02:59:41
we try to break this down into
02:59:42
components you could have let's say like
02:59:44
the navbar component so you could have
02:59:46
code that only manages that one navbar
02:59:49
um each one of these is probably like a
02:59:52
trending card component right and they
02:59:55
all have a lot of things in common they
02:59:56
have a background image they have a
02:59:57
title they have some description they
02:59:59
have like a link
03:00:00
um but I you can wrap that up into a
03:00:03
component called UI card or uh trending
03:00:06
card each one of these is like an
03:00:08
individual post you could put that into
03:00:09
a component so modern web development
03:00:11
breaks everything down into components
03:00:13
and so this one thing right here is a
03:00:16
component and you have a section called
03:00:18
Script that's for all of your
03:00:19
interactive code goes and then
03:00:21
everything below that is your template
03:00:23
and that's what actually gets rendered
03:00:24
on the page so you can see here uh this
03:00:28
isn't a non-interactive example because
03:00:29
it's literally just you have a variable
03:00:31
and then you render it out on the page
03:00:34
um the the spelled examples here will
03:00:37
actually show you the exact uh
03:00:39
JavaScript output
03:00:49
and so basically though and really this
03:00:52
is a whole if you're newer to Modern
03:00:53
weatherline this is the idea you write
03:00:55
code that looks fairly simple like this
03:00:58
but then at the end of the day in order
03:01:00
to get it running inside of a web
03:01:01
browser it needs to get turned into
03:01:03
actual JavaScript and so at the end of
03:01:05
the day this is the code that gets spit
03:01:07
out by this felt compiler
03:01:09
which you actually don't even need to
03:01:10
look at you don't even need to know what
03:01:11
it does just know that you write this
03:01:13
code this happens
03:01:15
um okay so there are some other things
03:01:16
you might want to do
03:01:17
uh like
03:01:20
um
03:01:21
yeah reactive assignment so this is
03:01:23
where some like State management comes
03:01:25
into play so let's say you have a page
03:01:26
that has a button and you want to click
03:01:28
that button and uh some number goes up
03:01:31
every time you click the button well in
03:01:33
svelte you can do that like this so
03:01:35
Define your variable that has the
03:01:37
initial value
03:01:38
have a function that modifies that
03:01:41
variable and then call that function
03:01:43
when the button is clicked on
03:01:46
and then inside the button we can always
03:01:48
look at the latest value of count
03:01:51
and then here there's some custom logic
03:01:53
that likes does pluralization based on
03:01:55
what the current count is so this this
03:01:57
is an example of a more interactive bit
03:02:00
of code
03:02:02
um but if you were to think about like
03:02:03
how you would do this in vanilla JS
03:02:05
basically when the
03:02:07
um
03:02:08
uh
03:02:10
when the button is clicked you would
03:02:12
need to manually write the code that
03:02:13
says like grab that element
03:02:15
set its text content to be this value
03:02:17
the code would be a lot more manual
03:02:19
whereas Phil makes you lets you write
03:02:21
things in a very declarative way
03:02:24
um so like you you basically set up your
03:02:26
state you set up your functions you set
03:02:28
up your UI and then everything just just
03:02:29
flows from there
03:02:32
um you might also want to do something
03:02:33
like conditional rendering and that goes
03:02:35
uh like this so let's say I have some
03:02:38
state which is an object that has a
03:02:40
logged in property and then I have a a
03:02:43
function that can change that logged in
03:02:44
property to true or false and so if the
03:02:48
user is logged in
03:02:50
the button should say log out so that
03:02:51
they can log out and if the user is not
03:02:54
logged in then the button should say log
03:02:55
in so right now this if block is running
03:02:58
and this button is getting rendered but
03:02:59
when I click this this function runs it
03:03:01
changes the state and now this little
03:03:03
piece gets rendered right there so
03:03:04
there's conditional rendering you would
03:03:06
also have uh each block so this lets you
03:03:09
iterate over data so like let's say you
03:03:11
have a list and you want to show all of
03:03:13
those things on the page
03:03:15
they have this each directive you can
03:03:17
specify the list you want to iterate
03:03:19
over and then pull off the properties of
03:03:21
each of the thing in that list and so
03:03:24
for every cat in the cats list we're
03:03:25
going to have a list item that shows the
03:03:28
current index and the name
03:03:32
yeah
03:03:33
um and then we've already seen an
03:03:35
example of Dom events but basically any
03:03:36
Dom event you want to tap into exists on
03:03:39
an element so there's things like Mouse
03:03:41
move on click all of that stuff
03:03:44
yeah and that's the other nice thing
03:03:46
about uh svelte is because it doesn't
03:03:48
use a virtual Dom it doesn't need keys
03:03:50
so the keys concept comes from react in
03:03:52
the virtual Dom and then any any other
03:03:54
framework that implemented the virtual
03:03:55
Dom does a similar thing but uh the keys
03:04:00
are specifically for the virtual Dom to
03:04:01
keep track of which element in that list
03:04:03
got updated or changed but in this case
03:04:06
because there is no virtual Dom we don't
03:04:07
actually need keys
03:04:09
um I think you can have keys though
03:04:13
um
03:04:16
and
03:04:22
see what the difference is
03:04:28
yeah I think we we lose our s we lose we
03:04:31
lose our styling if we don't have the
03:04:33
keys
03:04:35
so that's it that's time's up that's
03:04:38
that's what's felt is um
03:04:40
I think okay never mind never mind if if
03:04:43
the list changes right so if things are
03:04:45
getting added or removed from the list
03:04:47
then you do need keys
03:05:03
cool
03:05:05
cool but yeah uh that's felt that's felt
03:05:07
it makes it really easy
03:05:09
um
03:05:10
and there are other things I didn't
03:05:12
mention like
03:05:13
Styles so uh by default
03:05:17
stylesins felt are scoped to the
03:05:19
component so if you put this little
03:05:20
style tag here any Styles you define in
03:05:23
here are only ever going to apply inside
03:05:25
of this component so I didn't show like
03:05:27
multiple components but you would have
03:05:28
an app that would have multiple
03:05:30
components and a lot of times you don't
03:05:31
want those styles to leak out because
03:05:33
you're you're styling that one specific
03:05:35
component
03:05:36
you get that by default uh so basically
03:05:39
any style is defined in here only apply
03:05:41
here and they don't leak out of the
03:05:42
component and that's you just get that
03:05:44
for free you don't have to do anything
03:05:45
special for that
03:05:46
but yeah that's that's felt in
03:05:49
seven minutes
03:05:51
okay I'm gonna get out of here thank you
03:05:53
everybody for hanging out this was fun
03:05:55
um please go watch my latest YouTube
03:05:57
video
03:05:58
I would appreciate it if you did and
03:06:01
also uh like it subscribe over there on
03:06:04
YouTube drop a follow here if you
03:06:06
haven't yet
03:06:08
um yeah so yeah this is not using the
03:06:10
shadow Dom
03:06:11
um it it
03:06:13
uh uses a mechanism that basically gives
03:06:17
unique names to the styles that you're
03:06:19
defining automatically
03:06:24
um yeah you can check out component
03:06:25
party
03:06:26
um they basically have a bunch of
03:06:27
front-end Frameworks listed and then
03:06:29
allow you to compare between them
03:06:31
that's a thing for sure
03:06:33
yeah
03:06:39
wait wait wait wait wait wait
03:06:44
they are basically like phishing
03:06:46
developers is that is that what's
03:06:48
happening I am ruse
03:06:52
like they give you a test assignment but
03:06:54
they're well and it's like they were
03:06:56
never going to hire you to begin with
03:06:57
they just wanted you to run their script
03:06:58
is that is that what you're saying
03:07:01
that's
03:07:02
that's unfortunate that's that's bad but
03:07:05
it's also very interesting but yeah um
03:07:08
follow me over on YouTube uh I have a
03:07:10
mailing list if you're gonna follow me
03:07:11
anywhere please follow me on the mailing
03:07:13
list uh it's how I can stay in touch
03:07:16
with you uh regardless of platform I
03:07:18
send go live notifications there I send
03:07:20
a weekly update check that out
03:07:23
let's have codex uh actually I'll do one
03:07:25
last thing uh I I so I don't know if I
03:07:27
don't know if you saw my recent video
03:07:28
codex but I actually did answer your
03:07:31
question
03:07:32
from Twitter I just didn't include it in
03:07:36
the video because it made the video too
03:07:37
long so I'm gonna I'm gonna end with
03:07:39
this and then we're gonna go on a raid
03:07:40
but get get ready to raid
03:07:43
um
03:07:45
uh go find the raid messages we're gonna
03:07:48
raid right after I play this after I
03:07:49
play this clip
03:07:53
next question is from codex and it says
03:07:55
uh do you have any
03:08:05
for the question form
03:08:06
next question is from codex and it says
03:08:08
uh do you have any essential gear and
03:08:12
first up really good tent pegs so if you
03:08:16
buy a tent it comes with these pegs and
03:08:18
typically they're like not very strong
03:08:20
and if you try to hammer them in
03:08:22
especially if it's like really hard
03:08:23
ground they'll Bend
03:08:25
um or it'll be really hard to get them
03:08:27
into the ground so I have many many many
03:08:29
really really sturdy long tent stakes
03:08:33
and I also bring a mallet with me so I
03:08:35
can I can Hammer a steak into anything I
03:08:38
can tie down tarps I can tie down my
03:08:40
tent and I don't have to worry about the
03:08:42
stakes like bending or whatever so to me
03:08:44
that's essential like especially if
03:08:45
you're trying to put up a tarp really
03:08:47
quick because it's about to rain or
03:08:48
something like that having those kinds
03:08:50
of pegs and a hammer is like essential
03:08:52
the other essential piece which I
03:08:53
already mentioned was a cut for me so if
03:08:55
you're doing car camping uh you have the
03:08:58
room to potentially depending on how
03:09:00
many people are going and what you're
03:09:01
bringing you potentially have the room
03:09:03
to pack a cot or like an air mattress or
03:09:06
a large Comfy Cushion or something like
03:09:07
that
03:09:08
to me that's essential because if I get
03:09:11
a good night's sleep I'm I'm having a
03:09:13
good time camping so the other essential
03:09:15
piece is the clothes that you wear so
03:09:17
depending on if it's hot or if it's cold
03:09:19
synthetic fabrics dry really quickly so
03:09:22
if you sweat the the moisture wicking
03:09:24
it'll dry quickly uh the last thing you
03:09:27
want is wearing cotton and then you get
03:09:29
sweaty and your clothes is just wet all
03:09:31
the time so so the other essential is
03:09:32
just look make sure that you have some
03:09:34
synthetic fabric so like 90 polyester I
03:09:37
have like a polyester cotton blend
03:09:38
that's really nice it dries very quickly
03:09:40
but uh basically if you're in the
03:09:42
outdoors you possibly will get wet
03:09:44
either from your own sweat or water from
03:09:46
the sky or from a lake and you want to
03:09:49
be able to dry very quickly and then the
03:09:50
other thing is I wear wool socks I
03:09:52
actually wear wool socks in the summer
03:09:54
but they sell like lightweight wool
03:09:57
socks but wool is also moisture wicking
03:09:59
so your feet can also stay comfortable
03:10:01
and I guess while I'm talking about
03:10:03
clothes a good pair of hiking shoes
03:10:04
right now I have these uh trail running
03:10:06
shoes they're kind of like all purpose
03:10:07
meaning you can run in them you can hike
03:10:09
in them there's probably a limit to what
03:10:11
you can hike to in these kinds of shoes
03:10:12
but like if you're just doing like car
03:10:14
camping and there's a couple of trails
03:10:16
near where you're camping these are
03:10:18
probably more than enough to make sure
03:10:20
that you have enough grip and also your
03:10:22
feet can stay comfortable if you're
03:10:23
walking a lot
03:10:24
this next question comes from Jacques
03:10:26
who
03:10:31
so yeah I originally the video was
03:10:33
originally 30 minutes long
03:10:35
like 28 minutes long and I was like I
03:10:38
have to cut this down to uh
03:10:41
it's like under 20 minutes
03:10:44
um so your question got cut codex sorry
03:10:47
about that
03:10:49
um all right let's go on a raid uh and
03:10:51
also uh take a look at the the schedule
03:10:53
so I'll be live tomorrow night
03:10:56
if you go to this website you can see
03:10:58
the schedule in your time zone
03:11:00
um
03:11:01
hopefully
03:11:04
you have wool inserts for your shoes
03:11:05
I've never heard of that
03:11:08
yeah so if you go to this site I'll be
03:11:10
live tomorrow at this time it'll be in
03:11:12
your time zone if you go to this site
03:11:13
okay let's go on a raid thanks everyone
03:11:15
for the questions today uh I appreciate
03:11:17
you all thanks for hanging out thanks
03:11:19
for being kind
03:11:20
and wherever you are in the world have a
03:11:23
wonderful morning afternoon evening or
03:11:26
until next time here's this
03:11:30
thank you
03:12:04
again
03:12:56
thank you
03:13:37
thank you
